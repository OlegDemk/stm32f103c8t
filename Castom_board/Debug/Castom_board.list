
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800804c  0800804c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800804c  0800804c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  2000008c  080080e0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e5c  080080e0  00020e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d038  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b77  00000000  00000000  0003d0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00042220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4fc  00000000  00000000  00043648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015f14  00000000  00000000  0005eb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000914b7  00000000  00000000  00074a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  00105f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f74 	.word	0x08007f74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08007f74 	.word	0x08007f74

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	d1ed      	bne.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <test_flash_W25Q>:
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------
// Work
void test_flash_W25Q(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t init=0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	init = W25qxx_Init();
 8000fda:	f001 fb7d 	bl	80026d8 <W25qxx_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]

	uint32_t id=0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
	id = W25qxx_ReadID();
 8000fe6:	f001 fb01 	bl	80025ec <W25qxx_ReadID>
 8000fea:	4603      	mov	r3, r0
 8000fec:	60bb      	str	r3, [r7, #8]
	//	1.Test write/read several bytes
	// test_write_read_bytes();
	// 2. Test write/read pages (255 bytes)
	 //test_write_read_page();

	save_data_in_flash();
 8000fee:	f000 f807 	bl	8001000 <save_data_in_flash>

	//semulate_write_data_in_flash_w25q126();



	int lll = 999;
 8000ff2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000ff6:	607b      	str	r3, [r7, #4]

}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <save_data_in_flash>:
//
//	int f =999;
}
// ----------------------------------------------------------------------------
void save_data_in_flash(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0d0      	sub	sp, #320	; 0x140
 8001004:	af06      	add	r7, sp, #24
	W25qxx_EraseSector(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f001 fc78 	bl	80028fc <W25qxx_EraseSector>

	char test_array [32] = {0};
 800100c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fb59 	bl	80076cc <memset>

	unsigned int number_of_measure = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint8_t tempetature = 21;
 8001020:	2315      	movs	r3, #21
 8001022:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	uint8_t humidity = 70;
 8001026:	2346      	movs	r3, #70	; 0x46
 8001028:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122

	sprintf(test_array,"%d" "%s %s%d%s %s%d%s",number_of_measure ,"sensor_1", "T:",tempetature, "C", "H:",humidity, "%");
 800102c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001030:	f897 2122 	ldrb.w	r2, [r7, #290]	; 0x122
 8001034:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001038:	492f      	ldr	r1, [pc, #188]	; (80010f8 <save_data_in_flash+0xf8>)
 800103a:	9105      	str	r1, [sp, #20]
 800103c:	9204      	str	r2, [sp, #16]
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <save_data_in_flash+0xfc>)
 8001040:	9203      	str	r2, [sp, #12]
 8001042:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <save_data_in_flash+0x100>)
 8001044:	9202      	str	r2, [sp, #8]
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <save_data_in_flash+0x104>)
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <save_data_in_flash+0x108>)
 800104e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001052:	492e      	ldr	r1, [pc, #184]	; (800110c <save_data_in_flash+0x10c>)
 8001054:	f006 fbf8 	bl	8007848 <siprintf>

	uint8_t q = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

	uint8_t size_array = sizeof(test_array)-1;
 800105e:	231f      	movs	r3, #31
 8001060:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	// Write on flash
	while(q<=8)			// Simulating filling one page
 8001064:	e031      	b.n	80010ca <save_data_in_flash+0xca>
	{
		number_of_measure ++;	// Simulate number of measure
 8001066:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800106a:	3301      	adds	r3, #1
 800106c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tempetature++;			// Simulate temperature
 8001070:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001074:	3301      	adds	r3, #1
 8001076:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		humidity++;				// Simulate humidity
 800107a:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800107e:	3301      	adds	r3, #1
 8001080:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
		sprintf(test_array,"%d" "%s %s%d%s %s%d%s",number_of_measure ,"sensor_1", "T:",tempetature, "C", "H:",humidity, "%");	// Write data on array
 8001084:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001088:	f897 2122 	ldrb.w	r2, [r7, #290]	; 0x122
 800108c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001090:	4919      	ldr	r1, [pc, #100]	; (80010f8 <save_data_in_flash+0xf8>)
 8001092:	9105      	str	r1, [sp, #20]
 8001094:	9204      	str	r2, [sp, #16]
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <save_data_in_flash+0xfc>)
 8001098:	9203      	str	r2, [sp, #12]
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <save_data_in_flash+0x100>)
 800109c:	9202      	str	r2, [sp, #8]
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <save_data_in_flash+0x104>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <save_data_in_flash+0x108>)
 80010a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80010aa:	4918      	ldr	r1, [pc, #96]	; (800110c <save_data_in_flash+0x10c>)
 80010ac:	f006 fbcc 	bl	8007848 <siprintf>

		save_arrey_in_flash_memory(test_array, size_array);
 80010b0:	f897 2120 	ldrb.w	r2, [r7, #288]	; 0x120
 80010b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f828 	bl	8001110 <save_arrey_in_flash_memory>
		q++;
 80010c0:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80010c4:	3301      	adds	r3, #1
 80010c6:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	while(q<=8)			// Simulating filling one page
 80010ca:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d9c9      	bls.n	8001066 <save_data_in_flash+0x66>
	}

	// Read from flash
	char buff_for_read_from_flash[256] = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	4618      	mov	r0, r3
 80010d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010da:	461a      	mov	r2, r3
 80010dc:	2100      	movs	r1, #0
 80010de:	f006 faf5 	bl	80076cc <memset>
	W25qxx_ReadPage(buff_for_read_from_flash, 0, 0, 0);
 80010e2:	4638      	mov	r0, r7
 80010e4:	2300      	movs	r3, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	f001 fcad 	bl	8002a48 <W25qxx_ReadPage>
}
 80010ee:	bf00      	nop
 80010f0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	08007fbc 	.word	0x08007fbc
 80010fc:	08007fc0 	.word	0x08007fc0
 8001100:	08007fc4 	.word	0x08007fc4
 8001104:	08007fc8 	.word	0x08007fc8
 8001108:	08007f9c 	.word	0x08007f9c
 800110c:	08007fa8 	.word	0x08007fa8

08001110 <save_arrey_in_flash_memory>:

void save_arrey_in_flash_memory(char *test_array, uint8_t size_array)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
	static unsigned int flash_offset = 0;

	for(int i = 0; i <=  size_array; i++)						// Write all bytes from array
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e00e      	b.n	8001140 <save_arrey_in_flash_memory+0x30>
	{
		W25qxx_WriteByte(test_array[i], flash_offset++);		// Write all bytes from array
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	7818      	ldrb	r0, [r3, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <save_arrey_in_flash_memory+0x40>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <save_arrey_in_flash_memory+0x40>)
 8001132:	600a      	str	r2, [r1, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f001 fc35 	bl	80029a4 <W25qxx_WriteByte>
	for(int i = 0; i <=  size_array; i++)						// Write all bytes from array
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	ddec      	ble.n	8001122 <save_arrey_in_flash_memory+0x12>
	}
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200000ac 	.word	0x200000ac

08001154 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b08b      	sub	sp, #44	; 0x2c
 8001158:	af00      	add	r7, sp, #0
	uint8_t size=0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 8001176:	463b      	mov	r3, r7
 8001178:	2101      	movs	r1, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f958 	bl	8001430 <r_single_Si7021>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001186:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800118a:	2b00      	cmp	r3, #0
 800118c:	d000      	beq.n	8001190 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 800118e:	e7fe      	b.n	800118e <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f04f 0100 	mov.w	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fecc 	bl	8000f34 <__aeabi_fcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <read_T_and_H_SI7021+0x52>
 80011a2:	4b52      	ldr	r3, [pc, #328]	; (80012ec <read_T_and_H_SI7021+0x198>)
 80011a4:	e000      	b.n	80011a8 <read_T_and_H_SI7021+0x54>
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <read_T_and_H_SI7021+0x19c>)
 80011a8:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f04f 0100 	mov.w	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff febf 	bl	8000f34 <__aeabi_fcmplt>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <read_T_and_H_SI7021+0x70>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011c2:	e000      	b.n	80011c6 <read_T_and_H_SI7021+0x72>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 80011c8:	69f8      	ldr	r0, [r7, #28]
 80011ca:	f7ff fedb 	bl	8000f84 <__aeabi_f2iz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 80011d2:	683c      	ldr	r4, [r7, #0]
 80011d4:	69b8      	ldr	r0, [r7, #24]
 80011d6:	f7ff fcbb 	bl	8000b50 <__aeabi_i2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff fc00 	bl	80009e4 <__aeabi_fsub>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 80011e8:	4942      	ldr	r1, [pc, #264]	; (80012f4 <read_T_and_H_SI7021+0x1a0>)
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff fd04 	bl	8000bf8 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f910 	bl	8000418 <__aeabi_f2d>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	f006 fe88 	bl	8007f14 <trunc>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fb6e 	bl	80008ec <__aeabi_d2iz>
 8001210:	4603      	mov	r3, r0
 8001212:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 8001214:	1d38      	adds	r0, r7, #4
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6a3a      	ldr	r2, [r7, #32]
 800121a:	4937      	ldr	r1, [pc, #220]	; (80012f8 <read_T_and_H_SI7021+0x1a4>)
 800121c:	f006 fb14 	bl	8007848 <siprintf>
	strcpy(temperature_si7021, str);
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4835      	ldr	r0, [pc, #212]	; (80012fc <read_T_and_H_SI7021+0x1a8>)
 8001226:	f006 fb2f 	bl	8007888 <strcpy>
	memset(str, 0 , sizeof(str));
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	220a      	movs	r2, #10
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f006 fa4b 	bl	80076cc <memset>

	// Read humidity
	STATUS = -1;
 8001236:	23ff      	movs	r3, #255	; 0xff
 8001238:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 800123c:	463b      	mov	r3, r7
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f8f5 	bl	8001430 <r_single_Si7021>
 8001246:	4603      	mov	r3, r0
 8001248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 800124c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001250:	2b00      	cmp	r3, #0
 8001252:	d000      	beq.n	8001256 <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 8001254:	e7fe      	b.n	8001254 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f04f 0100 	mov.w	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe69 	bl	8000f34 <__aeabi_fcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <read_T_and_H_SI7021+0x11c>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800126e:	e000      	b.n	8001272 <read_T_and_H_SI7021+0x11e>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8001274:	69f8      	ldr	r0, [r7, #28]
 8001276:	f7ff fe85 	bl	8000f84 <__aeabi_f2iz>
 800127a:	4603      	mov	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 800127e:	683c      	ldr	r4, [r7, #0]
 8001280:	69b8      	ldr	r0, [r7, #24]
 8001282:	f7ff fc65 	bl	8000b50 <__aeabi_i2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff fbaa 	bl	80009e4 <__aeabi_fsub>
 8001290:	4603      	mov	r3, r0
 8001292:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8001294:	4917      	ldr	r1, [pc, #92]	; (80012f4 <read_T_and_H_SI7021+0x1a0>)
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff fcae 	bl	8000bf8 <__aeabi_fmul>
 800129c:	4603      	mov	r3, r0
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8ba 	bl	8000418 <__aeabi_f2d>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	4618      	mov	r0, r3
 80012aa:	4621      	mov	r1, r4
 80012ac:	f006 fe32 	bl	8007f14 <trunc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4618      	mov	r0, r3
 80012b6:	4621      	mov	r1, r4
 80012b8:	f7ff fb18 	bl	80008ec <__aeabi_d2iz>
 80012bc:	4603      	mov	r3, r0
 80012be:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	490e      	ldr	r1, [pc, #56]	; (8001300 <read_T_and_H_SI7021+0x1ac>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f006 fabe 	bl	8007848 <siprintf>
	strcpy(humidity_si7021, str);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <read_T_and_H_SI7021+0x1b0>)
 80012d2:	f006 fad9 	bl	8007888 <strcpy>
	memset(str, 0 , sizeof(str));
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	220a      	movs	r2, #10
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 f9f5 	bl	80076cc <memset>
}
 80012e2:	bf00      	nop
 80012e4:	372c      	adds	r7, #44	; 0x2c
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08007fd4 	.word	0x08007fd4
 80012f0:	08007fd8 	.word	0x08007fd8
 80012f4:	461c4000 	.word	0x461c4000
 80012f8:	08007fdc 	.word	0x08007fdc
 80012fc:	2000052c 	.word	0x2000052c
 8001300:	08007fe4 	.word	0x08007fe4
 8001304:	20000534 	.word	0x20000534

08001308 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f86d 	bl	80003f4 <__aeabi_i2d>
 800131a:	a311      	add	r3, pc, #68	; (adr r3, 8001360 <process_temp_code+0x58>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f8d2 	bl	80004c8 <__aeabi_dmul>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <process_temp_code+0x68>)
 8001332:	f7ff f9f3 	bl	800071c <__aeabi_ddiv>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	a30a      	add	r3, pc, #40	; (adr r3, 8001368 <process_temp_code+0x60>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7fe ff08 	bl	8000158 <__aeabi_dsub>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff faf4 	bl	800093c <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	3d70a3d7 	.word	0x3d70a3d7
 8001364:	4065f70a 	.word	0x4065f70a
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	40476ccc 	.word	0x40476ccc
 8001370:	40f00000 	.word	0x40f00000

08001374 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f837 	bl	80003f4 <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <process_humi_code+0x84>)
 800138c:	f7ff f89c 	bl	80004c8 <__aeabi_dmul>
 8001390:	4603      	mov	r3, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4618      	mov	r0, r3
 8001396:	4621      	mov	r1, r4
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <process_humi_code+0x88>)
 800139e:	f7ff f9bd 	bl	800071c <__aeabi_ddiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	4618      	mov	r0, r3
 80013a8:	4621      	mov	r1, r4
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <process_humi_code+0x8c>)
 80013b0:	f7fe fed2 	bl	8000158 <__aeabi_dsub>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f7ff fabe 	bl	800093c <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fdb3 	bl	8000f34 <__aeabi_fcmplt>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <process_humi_code+0x66>
    return 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e009      	b.n	80013ee <process_humi_code+0x7a>
  else if(value > 100)
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <process_humi_code+0x90>)
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff fdc7 	bl	8000f70 <__aeabi_fcmpgt>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <process_humi_code+0x78>
    return 100;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <process_humi_code+0x90>)
 80013ea:	e000      	b.n	80013ee <process_humi_code+0x7a>
  else
    return (float)value;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	405f4000 	.word	0x405f4000
 80013fc:	40f00000 	.word	0x40f00000
 8001400:	40180000 	.word	0x40180000
 8001404:	42c80000 	.word	0x42c80000

08001408 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3301      	adds	r3, #1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	b29b      	uxth	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 8001442:	23e5      	movs	r3, #229	; 0xe5
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	e008      	b.n	800145a <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 800144e:	23e3      	movs	r3, #227	; 0xe3
 8001450:	737b      	strb	r3, [r7, #13]
 8001452:	e002      	b.n	800145a <r_single_Si7021+0x2a>
  else
    return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001458:	e03c      	b.n	80014d4 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	f107 020d 	add.w	r2, r7, #13
 8001460:	f242 7310 	movw	r3, #10000	; 0x2710
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	481c      	ldr	r0, [pc, #112]	; (80014dc <r_single_Si7021+0xac>)
 800146a:	f002 fa5d 	bl	8003928 <HAL_I2C_Master_Transmit>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <r_single_Si7021+0x4a>
    return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001478:	e02c      	b.n	80014d4 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	f107 0208 	add.w	r2, r7, #8
 8001480:	f242 7310 	movw	r3, #10000	; 0x2710
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2302      	movs	r3, #2
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <r_single_Si7021+0xac>)
 800148a:	f002 fb4b 	bl	8003b24 <HAL_I2C_Master_Receive>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <r_single_Si7021+0x6a>
    return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001498:	e01c      	b.n	80014d4 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffb2 	bl	8001408 <convert_to_uint16>
 80014a4:	4603      	mov	r3, r0
 80014a6:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <process_humi_code>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e009      	b.n	80014d2 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d106      	bne.n	80014d2 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff1e 	bl	8001308 <process_temp_code>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]

  return 0;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000664 	.word	0x20000664

080014e0 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <I2C_1_scaner+0xb4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	e043      	b.n	800157a <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f001 fbaa 	bl	8002c4c <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <I2C_1_scaner+0xb4>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	b299      	uxth	r1, r3
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <I2C_1_scaner+0xb8>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b298      	uxth	r0, r3
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <I2C_1_scaner+0xbc>)
 800150a:	881c      	ldrh	r4, [r3, #0]
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <I2C_1_scaner+0xbc>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <I2C_1_scaner+0xc0>)
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <I2C_1_scaner+0xc4>)
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	4623      	mov	r3, r4
 800151e:	4602      	mov	r2, r0
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <I2C_1_scaner+0xc8>)
 8001522:	f002 fe53 	bl	80041cc <HAL_I2C_Mem_Read>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <I2C_1_scaner+0xcc>)
 800152c:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <I2C_1_scaner+0xcc>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11b      	bne.n	800156e <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3301      	adds	r3, #1
 800153a:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <I2C_1_scaner+0xb4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b40      	cmp	r3, #64	; 0x40
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <I2C_1_scaner+0xb4>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b3c      	cmp	r3, #60	; 0x3c
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <I2C_1_scaner+0xb4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b3c      	cmp	r3, #60	; 0x3c
 8001566:	d001      	beq.n	800156c <I2C_1_scaner+0x8c>
 8001568:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 800156a:	e000      	b.n	800156e <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 800156c:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <I2C_1_scaner+0xb4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <I2C_1_scaner+0xb4>)
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <I2C_1_scaner+0xb4>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d1b7      	bne.n	80014f2 <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8001582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001586:	f001 fb61 	bl	8002c4c <HAL_Delay>
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	200000ee 	.word	0x200000ee
 8001598:	200000ef 	.word	0x200000ef
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004
 80015a4:	200000f0 	.word	0x200000f0
 80015a8:	20000664 	.word	0x20000664
 80015ac:	200000f2 	.word	0x200000f2

080015b0 <HAL_UART_RxCpltCallback>:
// -----------------------------------------------------------------------------
// Receive data from GPS module
#if GPS
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
		flag = 1;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_UART_RxCpltCallback+0x18>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	200000f5 	.word	0x200000f5

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d2:	f001 fad9 	bl	8002b88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d6:	f000 f84b 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015da:	f000 faa7 	bl	8001b2c <MX_GPIO_Init>
  MX_DMA_Init();
 80015de:	f000 fa87 	bl	8001af0 <MX_DMA_Init>
  MX_I2C1_Init();
 80015e2:	f000 f88b 	bl	80016fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015e6:	f000 fa05 	bl	80019f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80015ea:	f000 fa57 	bl	8001a9c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80015ee:	f000 f8b3 	bl	8001758 <MX_SPI2_Init>
  MX_TIM1_Init();
 80015f2:	f000 f8e7 	bl	80017c4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80015f6:	f000 fa27 	bl	8001a48 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015fa:	f000 f985 	bl	8001908 <MX_TIM2_Init>
  MX_FATFS_Init();
 80015fe:	f005 ff7f 	bl	8007500 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(5000);

	#if I2C_SCANNER
  		I2C_1_scaner();
 8001602:	f7ff ff6d 	bl	80014e0 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  		read_T_and_H_SI7021();
 8001606:	f7ff fda5 	bl	8001154 <read_T_and_H_SI7021>
	#endif

	#if OLED
  		init_oled();
 800160a:	f000 fb8b 	bl	8001d24 <init_oled>
	  //test_oled();
	#endif

	#if GPS
  		memset(GPS_buff ,0 ,sizeof(GPS_buff));
 800160e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001612:	2100      	movs	r1, #0
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <main+0x90>)
 8001616:	f006 f859 	bl	80076cc <memset>
  		HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 800161a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161e:	490f      	ldr	r1, [pc, #60]	; (800165c <main+0x90>)
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <main+0x94>)
 8001622:	f005 fb8b 	bl	8006d3c <HAL_UART_Receive_DMA>

  		//
  	//HAL_TIM_Base_Start_IT(&htim2);


  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001626:	2100      	movs	r1, #0
 8001628:	480e      	ldr	r0, [pc, #56]	; (8001664 <main+0x98>)
 800162a:	f004 fdcf 	bl	80061cc <HAL_TIM_PWM_Start>
  	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  	///////////////////////////////////////////////////////////////////
  	// Turn on interrupt, if in RX buffer are one byte
  	// Register CR1-> RXNEIE
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <main+0x9c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <main+0x9c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	// Test led
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <main+0xa0>)
 8001646:	f002 f806 	bl	8003656 <HAL_GPIO_WritePin>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
  #endif

  int EXIT = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]

while (1)
{
	test_flash_W25Q();
 800164e:	f7ff fcbf 	bl	8000fd0 <test_flash_W25Q>
	while(1)
	{
		HAL_Delay(100);
 8001652:	2064      	movs	r0, #100	; 0x64
 8001654:	f001 fafa 	bl	8002c4c <HAL_Delay>
 8001658:	e7fb      	b.n	8001652 <main+0x86>
 800165a:	bf00      	nop
 800165c:	200006b8 	.word	0x200006b8
 8001660:	20000624 	.word	0x20000624
 8001664:	20000940 	.word	0x20000940
 8001668:	20000988 	.word	0x20000988
 800166c:	40011000 	.word	0x40011000

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b090      	sub	sp, #64	; 0x40
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0318 	add.w	r3, r7, #24
 800167a:	2228      	movs	r2, #40	; 0x28
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f006 f824 	bl	80076cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fc93 	bl	8004fe4 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016c4:	f000 fb28 	bl	8001d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fefe 	bl	80054e4 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ee:	f000 fb13 	bl	8001d18 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3740      	adds	r7, #64	; 0x40
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_I2C1_Init+0x50>)
 800173a:	f001 ffbd 	bl	80036b8 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 fae8 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000664 	.word	0x20000664
 8001750:	40005400 	.word	0x40005400
 8001754:	000186a0 	.word	0x000186a0

08001758 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI2_Init+0x64>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <MX_SPI2_Init+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI2_Init+0x64>)
 8001764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI2_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI2_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI2_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI2_Init+0x64>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI2_Init+0x64>)
 800178c:	2210      	movs	r2, #16
 800178e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_SPI2_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI2_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_SPI2_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI2_Init+0x64>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_SPI2_Init+0x64>)
 80017aa:	f004 f837 	bl	800581c <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017b4:	f000 fab0 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000588 	.word	0x20000588
 80017c0:	40003800 	.word	0x40003800

080017c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b096      	sub	sp, #88	; 0x58
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2220      	movs	r2, #32
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 ff65 	bl	80076cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <MX_TIM1_Init+0x13c>)
 8001804:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <MX_TIM1_Init+0x140>)
 8001806:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8001808:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <MX_TIM1_Init+0x13c>)
 800180a:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 800180e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <MX_TIM1_Init+0x13c>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <MX_TIM1_Init+0x13c>)
 8001818:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800181c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <MX_TIM1_Init+0x13c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <MX_TIM1_Init+0x13c>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <MX_TIM1_Init+0x13c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001830:	4833      	ldr	r0, [pc, #204]	; (8001900 <MX_TIM1_Init+0x13c>)
 8001832:	f004 fc23 	bl	800607c <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800183c:	f000 fa6c 	bl	8001d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001846:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800184a:	4619      	mov	r1, r3
 800184c:	482c      	ldr	r0, [pc, #176]	; (8001900 <MX_TIM1_Init+0x13c>)
 800184e:	f004 fe1d 	bl	800648c <HAL_TIM_ConfigClockSource>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001858:	f000 fa5e 	bl	8001d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800185c:	4828      	ldr	r0, [pc, #160]	; (8001900 <MX_TIM1_Init+0x13c>)
 800185e:	f004 fc5c 	bl	800611a <HAL_TIM_PWM_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001868:	f000 fa56 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001878:	4619      	mov	r1, r3
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <MX_TIM1_Init+0x13c>)
 800187c:	f005 f962 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001886:	f000 fa47 	bl	8001d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	; 0x60
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 800188e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	2200      	movs	r2, #0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <MX_TIM1_Init+0x13c>)
 80018b2:	f004 fd2d 	bl	8006310 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80018bc:	f000 fa2c 	bl	8001d18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_TIM1_Init+0x13c>)
 80018e4:	f005 f98c 	bl	8006c00 <HAL_TIMEx_ConfigBreakDeadTime>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80018ee:	f000 fa13 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018f2:	4803      	ldr	r0, [pc, #12]	; (8001900 <MX_TIM1_Init+0x13c>)
 80018f4:	f000 fbe8 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80018f8:	bf00      	nop
 80018fa:	3758      	adds	r7, #88	; 0x58
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200008f8 	.word	0x200008f8
 8001904:	40012c00 	.word	0x40012c00

08001908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001942:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001950:	22c8      	movs	r2, #200	; 0xc8
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4823      	ldr	r0, [pc, #140]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001962:	f004 fb8b 	bl	800607c <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800196c:	f000 f9d4 	bl	8001d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197a:	4619      	mov	r1, r3
 800197c:	481c      	ldr	r0, [pc, #112]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800197e:	f004 fd85 	bl	800648c <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001988:	f000 f9c6 	bl	8001d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800198c:	4818      	ldr	r0, [pc, #96]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800198e:	f004 fbc4 	bl	800611a <HAL_TIM_PWM_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001998:	f000 f9be 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4619      	mov	r1, r3
 80019aa:	4811      	ldr	r0, [pc, #68]	; (80019f0 <MX_TIM2_Init+0xe8>)
 80019ac:	f005 f8ca 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019b6:	f000 f9af 	bl	8001d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ba:	2360      	movs	r3, #96	; 0x60
 80019bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 80019be:	2319      	movs	r3, #25
 80019c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_TIM2_Init+0xe8>)
 80019d2:	f004 fc9d 	bl	8006310 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019dc:	f000 f99c 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <MX_TIM2_Init+0xe8>)
 80019e2:	f000 fb71 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80019e6:	bf00      	nop
 80019e8:	3738      	adds	r7, #56	; 0x38
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000940 	.word	0x20000940

080019f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_USART1_UART_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f005 f939 	bl	8006ca2 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a36:	f000 f96f 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200008b8 	.word	0x200008b8
 8001a44:	40013800 	.word	0x40013800

08001a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART2_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f005 f90f 	bl	8006ca2 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 f945 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000988 	.word	0x20000988
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_USART3_UART_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	f005 f8e5 	bl	8006ca2 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f000 f91b 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000624 	.word	0x20000624
 8001aec:	40004800 	.word	0x40004800

08001af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_DMA_Init+0x38>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <MX_DMA_Init+0x38>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_DMA_Init+0x38>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	200d      	movs	r0, #13
 8001b14:	f001 f993 	bl	8002e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b18:	200d      	movs	r0, #13
 8001b1a:	f001 f9ac 	bl	8002e76 <HAL_NVIC_EnableIRQ>

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b58:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a50      	ldr	r2, [pc, #320]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b5e:	f043 0320 	orr.w	r3, r3, #32
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <MX_GPIO_Init+0x174>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba6:	483f      	ldr	r0, [pc, #252]	; (8001ca4 <MX_GPIO_Init+0x178>)
 8001ba8:	f001 fd55 	bl	8003656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f241 010a 	movw	r1, #4106	; 0x100a
 8001bb2:	483d      	ldr	r0, [pc, #244]	; (8001ca8 <MX_GPIO_Init+0x17c>)
 8001bb4:	f001 fd4f 	bl	8003656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001bbe:	483b      	ldr	r0, [pc, #236]	; (8001cac <MX_GPIO_Init+0x180>)
 8001bc0:	f001 fd49 	bl	8003656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4831      	ldr	r0, [pc, #196]	; (8001ca4 <MX_GPIO_Init+0x178>)
 8001bde:	f001 fbc9 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001be2:	2302      	movs	r3, #2
 8001be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001be6:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <MX_GPIO_Init+0x184>)
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	482d      	ldr	r0, [pc, #180]	; (8001cac <MX_GPIO_Init+0x180>)
 8001bf6:	f001 fbbd 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4825      	ldr	r0, [pc, #148]	; (8001ca8 <MX_GPIO_Init+0x17c>)
 8001c12:	f001 fbaf 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <MX_GPIO_Init+0x17c>)
 8001c30:	f001 fba0 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8001c34:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4817      	ldr	r0, [pc, #92]	; (8001cac <MX_GPIO_Init+0x180>)
 8001c4e:	f001 fb91 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c52:	2308      	movs	r3, #8
 8001c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4619      	mov	r1, r3
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <MX_GPIO_Init+0x17c>)
 8001c6a:	f001 fb83 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001c6e:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <MX_GPIO_Init+0x17c>)
 8001c84:	f001 fb76 	bl	8003374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2007      	movs	r0, #7
 8001c8e:	f001 f8d6 	bl	8002e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c92:	2007      	movs	r0, #7
 8001c94:	f001 f8ef 	bl	8002e76 <HAL_NVIC_EnableIRQ>

}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	10310000 	.word	0x10310000

08001cb4 <HAL_GPIO_EXTI_Callback>:
 * That STATUS must check timer every 0.5 sec
 * If INCOMMING_RING_OR_SMS_STATUS == true
 * 		turn on "incoming call" function
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11f      	bne.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
	{
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET)
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4811      	ldr	r0, [pc, #68]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x58>)
 8001cc8:	f001 fcae 	bl	8003628 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x30>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001cda:	f001 fcbc 	bl	8003656 <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = true;				// Check it status if it is 'true' we have incoming ring or sms
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_SET)
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x58>)
 8001ce8:	f001 fc9e 	bl	8003628 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001cfa:	f001 fcac 	bl	8003656 <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = false;
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x60>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
		}
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	40011000 	.word	0x40011000
 8001d14:	200000f4 	.word	0x200000f4

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <init_oled>:
void print_GSM_data(void);
void print_fingerprint_data(void);

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001d28:	f000 f824 	bl	8001d74 <ssd1306_Init>
	HAL_Delay(500);
 8001d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d30:	f000 ff8c 	bl	8002c4c <HAL_Delay>
	ssd1306_Fill(Black);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 f889 	bl	8001e4c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001d3a:	f000 f8a9 	bl	8001e90 <ssd1306_UpdateScreen>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af04      	add	r7, sp, #16
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001d4e:	230a      	movs	r3, #10
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	2301      	movs	r3, #1
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2178      	movs	r1, #120	; 0x78
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <ssd1306_WriteCommand+0x2c>)
 8001d62:	f002 f939 	bl	8003fd8 <HAL_I2C_Mem_Write>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000664 	.word	0x20000664

08001d74 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001d78:	2064      	movs	r0, #100	; 0x64
 8001d7a:	f000 ff67 	bl	8002c4c <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001d7e:	20ae      	movs	r0, #174	; 0xae
 8001d80:	f7ff ffe0 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001d84:	2020      	movs	r0, #32
 8001d86:	f7ff ffdd 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d8a:	2010      	movs	r0, #16
 8001d8c:	f7ff ffda 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d90:	20b0      	movs	r0, #176	; 0xb0
 8001d92:	f7ff ffd7 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d96:	20c8      	movs	r0, #200	; 0xc8
 8001d98:	f7ff ffd4 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff ffd1 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001da2:	2010      	movs	r0, #16
 8001da4:	f7ff ffce 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001da8:	2040      	movs	r0, #64	; 0x40
 8001daa:	f7ff ffcb 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001dae:	2081      	movs	r0, #129	; 0x81
 8001db0:	f7ff ffc8 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001db4:	20ff      	movs	r0, #255	; 0xff
 8001db6:	f7ff ffc5 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001dba:	20a1      	movs	r0, #161	; 0xa1
 8001dbc:	f7ff ffc2 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001dc0:	20a6      	movs	r0, #166	; 0xa6
 8001dc2:	f7ff ffbf 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001dc6:	20a8      	movs	r0, #168	; 0xa8
 8001dc8:	f7ff ffbc 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001dcc:	203f      	movs	r0, #63	; 0x3f
 8001dce:	f7ff ffb9 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dd2:	20a4      	movs	r0, #164	; 0xa4
 8001dd4:	f7ff ffb6 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001dd8:	20d3      	movs	r0, #211	; 0xd3
 8001dda:	f7ff ffb3 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff ffb0 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001de4:	20d5      	movs	r0, #213	; 0xd5
 8001de6:	f7ff ffad 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001dea:	20f0      	movs	r0, #240	; 0xf0
 8001dec:	f7ff ffaa 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001df0:	20d9      	movs	r0, #217	; 0xd9
 8001df2:	f7ff ffa7 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001df6:	2022      	movs	r0, #34	; 0x22
 8001df8:	f7ff ffa4 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001dfc:	20da      	movs	r0, #218	; 0xda
 8001dfe:	f7ff ffa1 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001e02:	2012      	movs	r0, #18
 8001e04:	f7ff ff9e 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001e08:	20db      	movs	r0, #219	; 0xdb
 8001e0a:	f7ff ff9b 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e0e:	2020      	movs	r0, #32
 8001e10:	f7ff ff98 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e14:	208d      	movs	r0, #141	; 0x8d
 8001e16:	f7ff ff95 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f7ff ff92 	bl	8001d44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001e20:	20af      	movs	r0, #175	; 0xaf
 8001e22:	f7ff ff8f 	bl	8001d44 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f810 	bl	8001e4c <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001e2c:	f000 f830 	bl	8001e90 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <ssd1306_Init+0xd4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <ssd1306_Init+0xd4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <ssd1306_Init+0xd4>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200004f8 	.word	0x200004f8

08001e4c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e00d      	b.n	8001e78 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <ssd1306_Fill+0x1a>
 8001e62:	2100      	movs	r1, #0
 8001e64:	e000      	b.n	8001e68 <ssd1306_Fill+0x1c>
 8001e66:	21ff      	movs	r1, #255	; 0xff
 8001e68:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <ssd1306_Fill+0x40>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	460a      	mov	r2, r1
 8001e70:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d3ed      	bcc.n	8001e5c <ssd1306_Fill+0x10>
	}
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	200000f8 	.word	0x200000f8

08001e90 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	e01d      	b.n	8001ed8 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	3b50      	subs	r3, #80	; 0x50
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff4e 	bl	8001d44 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff ff4b 	bl	8001d44 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001eae:	2010      	movs	r0, #16
 8001eb0:	f7ff ff48 	bl	8001d44 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <ssd1306_UpdateScreen+0x58>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	2264      	movs	r2, #100	; 0x64
 8001ebe:	9202      	str	r2, [sp, #8]
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	9201      	str	r2, [sp, #4]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	2178      	movs	r1, #120	; 0x78
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <ssd1306_UpdateScreen+0x5c>)
 8001ece:	f002 f883 	bl	8003fd8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d9de      	bls.n	8001e9c <ssd1306_UpdateScreen+0xc>
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000f8 	.word	0x200000f8
 8001eec:	20000664 	.word	0x20000664

08001ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_MspInit+0x5c>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <HAL_MspInit+0x5c>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6193      	str	r3, [r2, #24]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_MspInit+0x60>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_MspInit+0x60>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000

08001f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <HAL_I2C_MspInit+0x70>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d123      	bne.n	8001fbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_I2C_MspInit+0x74>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_I2C_MspInit+0x74>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_I2C_MspInit+0x74>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f8c:	23c0      	movs	r3, #192	; 0xc0
 8001f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f90:	2312      	movs	r3, #18
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480b      	ldr	r0, [pc, #44]	; (8001fcc <HAL_I2C_MspInit+0x78>)
 8001fa0:	f001 f9e8 	bl	8003374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_I2C_MspInit+0x74>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_I2C_MspInit+0x74>)
 8001faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fae:	61d3      	str	r3, [r2, #28]
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_I2C_MspInit+0x74>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010c00 	.word	0x40010c00

08001fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_SPI_MspInit+0x8c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d131      	bne.n	8002054 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_SPI_MspInit+0x90>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_SPI_MspInit+0x90>)
 8001ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffa:	61d3      	str	r3, [r2, #28]
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_SPI_MspInit+0x90>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_SPI_MspInit+0x90>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_SPI_MspInit+0x90>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_SPI_MspInit+0x90>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002020:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4619      	mov	r1, r3
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <HAL_SPI_MspInit+0x94>)
 8002036:	f001 f99d 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800203a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_SPI_MspInit+0x94>)
 8002050:	f001 f990 	bl	8003374 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40003800 	.word	0x40003800
 8002060:	40021000 	.word	0x40021000
 8002064:	40010c00 	.word	0x40010c00

08002068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_TIM_Base_MspInit+0x58>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10c      	bne.n	8002094 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_TIM_Base_MspInit+0x5c>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_TIM_Base_MspInit+0x5c>)
 8002080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_TIM_Base_MspInit+0x5c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002092:	e010      	b.n	80020b6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d10b      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_TIM_Base_MspInit+0x5c>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_TIM_Base_MspInit+0x5c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_TIM_Base_MspInit+0x5c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_TIM_MspPostInit+0x98>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d119      	bne.n	800211c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_TIM_MspPostInit+0x9c>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_TIM_MspPostInit+0x9c>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_TIM_MspPostInit+0x9c>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	4814      	ldr	r0, [pc, #80]	; (8002168 <HAL_TIM_MspPostInit+0xa0>)
 8002116:	f001 f92d 	bl	8003374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800211a:	e01c      	b.n	8002156 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d117      	bne.n	8002156 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_TIM_MspPostInit+0x9c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_TIM_MspPostInit+0x9c>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6193      	str	r3, [r2, #24]
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_TIM_MspPostInit+0x9c>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800213e:	2301      	movs	r3, #1
 8002140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <HAL_TIM_MspPostInit+0xa0>)
 8002152:	f001 f90f 	bl	8003374 <HAL_GPIO_Init>
}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40010800 	.word	0x40010800

0800216c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a73      	ldr	r2, [pc, #460]	; (8002354 <HAL_UART_MspInit+0x1e8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d13a      	bne.n	8002202 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800218c:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a71      	ldr	r2, [pc, #452]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 8002192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a6b      	ldr	r2, [pc, #428]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b69      	ldr	r3, [pc, #420]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	4619      	mov	r1, r3
 80021d0:	4862      	ldr	r0, [pc, #392]	; (800235c <HAL_UART_MspInit+0x1f0>)
 80021d2:	f001 f8cf 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	4619      	mov	r1, r3
 80021ea:	485c      	ldr	r0, [pc, #368]	; (800235c <HAL_UART_MspInit+0x1f0>)
 80021ec:	f001 f8c2 	bl	8003374 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2025      	movs	r0, #37	; 0x25
 80021f6:	f000 fe22 	bl	8002e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021fa:	2025      	movs	r0, #37	; 0x25
 80021fc:	f000 fe3b 	bl	8002e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002200:	e0a3      	b.n	800234a <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a56      	ldr	r2, [pc, #344]	; (8002360 <HAL_UART_MspInit+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d138      	bne.n	800227e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800220c:	4b52      	ldr	r3, [pc, #328]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 8002212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002216:	61d3      	str	r3, [r2, #28]
 8002218:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a4b      	ldr	r2, [pc, #300]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800223c:	2304      	movs	r3, #4
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0320 	add.w	r3, r7, #32
 800224c:	4619      	mov	r1, r3
 800224e:	4843      	ldr	r0, [pc, #268]	; (800235c <HAL_UART_MspInit+0x1f0>)
 8002250:	f001 f890 	bl	8003374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	4619      	mov	r1, r3
 8002266:	483d      	ldr	r0, [pc, #244]	; (800235c <HAL_UART_MspInit+0x1f0>)
 8002268:	f001 f884 	bl	8003374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	2026      	movs	r0, #38	; 0x26
 8002272:	f000 fde4 	bl	8002e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002276:	2026      	movs	r0, #38	; 0x26
 8002278:	f000 fdfd 	bl	8002e76 <HAL_NVIC_EnableIRQ>
}
 800227c:	e065      	b.n	800234a <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_UART_MspInit+0x1f8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d160      	bne.n	800234a <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002288:	4b33      	ldr	r3, [pc, #204]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a32      	ldr	r2, [pc, #200]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 800228e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002292:	61d3      	str	r3, [r2, #28]
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_UART_MspInit+0x1ec>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	4619      	mov	r1, r3
 80022cc:	4826      	ldr	r0, [pc, #152]	; (8002368 <HAL_UART_MspInit+0x1fc>)
 80022ce:	f001 f851 	bl	8003374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	4619      	mov	r1, r3
 80022e6:	4820      	ldr	r0, [pc, #128]	; (8002368 <HAL_UART_MspInit+0x1fc>)
 80022e8:	f001 f844 	bl	8003374 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_UART_MspInit+0x200>)
 80022ee:	4a20      	ldr	r2, [pc, #128]	; (8002370 <HAL_UART_MspInit+0x204>)
 80022f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_UART_MspInit+0x200>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_UART_MspInit+0x200>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_UART_MspInit+0x200>)
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_UART_MspInit+0x200>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_UART_MspInit+0x200>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_UART_MspInit+0x200>)
 8002312:	2220      	movs	r2, #32
 8002314:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_UART_MspInit+0x200>)
 8002318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800231e:	4813      	ldr	r0, [pc, #76]	; (800236c <HAL_UART_MspInit+0x200>)
 8002320:	f000 fdc4 	bl	8002eac <HAL_DMA_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800232a:	f7ff fcf5 	bl	8001d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_UART_MspInit+0x200>)
 8002332:	635a      	str	r2, [r3, #52]	; 0x34
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <HAL_UART_MspInit+0x200>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2027      	movs	r0, #39	; 0x27
 8002340:	f000 fd7d 	bl	8002e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002344:	2027      	movs	r0, #39	; 0x27
 8002346:	f000 fd96 	bl	8002e76 <HAL_NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3730      	adds	r7, #48	; 0x30
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40013800 	.word	0x40013800
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800
 8002360:	40004400 	.word	0x40004400
 8002364:	40004800 	.word	0x40004800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	200005e0 	.word	0x200005e0
 8002370:	40020030 	.word	0x40020030

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <HardFault_Handler+0x4>

08002386 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <MemManage_Handler+0x4>

0800238c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <BusFault_Handler+0x4>

08002392 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <UsageFault_Handler+0x4>

08002398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c0:	f000 fc28 	bl	8002c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023cc:	2002      	movs	r0, #2
 80023ce:	f001 f95b 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA1_Channel3_IRQHandler+0x10>)
 80023de:	f000 fe95 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200005e0 	.word	0x200005e0

080023ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <USART1_IRQHandler+0x70>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	2b0d      	cmp	r3, #13
 80023fc:	d013      	beq.n	8002426 <USART1_IRQHandler+0x3a>
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	2b0a      	cmp	r3, #10
 8002402:	d010      	beq.n	8002426 <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <USART1_IRQHandler+0x74>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d920      	bls.n	800244e <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <USART1_IRQHandler+0x78>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <USART1_IRQHandler+0x7c>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <USART1_IRQHandler+0x78>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <USART1_IRQHandler+0x78>)
 8002422:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8002424:	e013      	b.n	800244e <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <USART1_IRQHandler+0x78>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <USART1_IRQHandler+0x78>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <USART1_IRQHandler+0x80>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e002      	b.n	8002442 <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <USART1_IRQHandler+0x78>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <USART1_IRQHandler+0x74>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <USART1_IRQHandler+0x74>)
 800244c:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800244e:	4808      	ldr	r0, [pc, #32]	; (8002470 <USART1_IRQHandler+0x84>)
 8002450:	f004 fcf4 	bl	8006e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013800 	.word	0x40013800
 8002460:	200000ed 	.word	0x200000ed
 8002464:	200004fe 	.word	0x200004fe
 8002468:	200000b0 	.word	0x200000b0
 800246c:	200000ec 	.word	0x200000ec
 8002470:	200008b8 	.word	0x200008b8

08002474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  uint8_t data = USART2->DR;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <USART2_IRQHandler+0x50>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	71fb      	strb	r3, [r7, #7]

//  if(data != '\0')
//  {

	  if(fingerprint_count_bytes >= 11)  // 11  // 5
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <USART2_IRQHandler+0x54>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b0a      	cmp	r3, #10
 8002486:	d906      	bls.n	8002496 <USART2_IRQHandler+0x22>
	  {
		  fingerprint_count_bytes = 0;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <USART2_IRQHandler+0x54>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
		  data_from_fingerprint_module = 1;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <USART2_IRQHandler+0x58>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e00e      	b.n	80024b4 <USART2_IRQHandler+0x40>

		  //memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
	  }
	  else
	  {
		  response_packet[fingerprint_count_bytes] = data;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <USART2_IRQHandler+0x54>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <USART2_IRQHandler+0x5c>)
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	5453      	strb	r3, [r2, r1]
		  data_from_fingerprint_module = 0;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <USART2_IRQHandler+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
		  fingerprint_count_bytes ++;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <USART2_IRQHandler+0x54>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <USART2_IRQHandler+0x54>)
 80024b2:	701a      	strb	r2, [r3, #0]
	  }
//  }


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024b4:	4807      	ldr	r0, [pc, #28]	; (80024d4 <USART2_IRQHandler+0x60>)
 80024b6:	f004 fcc1 	bl	8006e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40004400 	.word	0x40004400
 80024c8:	200000a8 	.word	0x200000a8
 80024cc:	200000a9 	.word	0x200000a9
 80024d0:	20000500 	.word	0x20000500
 80024d4:	20000988 	.word	0x20000988

080024d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <USART3_IRQHandler+0x10>)
 80024de:	f004 fcad 	bl	8006e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000624 	.word	0x20000624

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f005 f8ac 	bl	8007678 <__errno>
 8002520:	4602      	mov	r2, r0
 8002522:	230c      	movs	r3, #12
 8002524:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20005000 	.word	0x20005000
 800254c:	00000400 	.word	0x00000400
 8002550:	2000050c 	.word	0x2000050c
 8002554:	20000e60 	.word	0x20000e60

08002558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <SystemInit+0x5c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <SystemInit+0x5c>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <SystemInit+0x5c>)
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4911      	ldr	r1, [pc, #68]	; (80025b4 <SystemInit+0x5c>)
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <SystemInit+0x60>)
 8002570:	4013      	ands	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <SystemInit+0x5c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <SystemInit+0x5c>)
 800257a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <SystemInit+0x5c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <SystemInit+0x5c>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <SystemInit+0x5c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <SystemInit+0x5c>)
 8002596:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800259a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <SystemInit+0x5c>)
 800259e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SystemInit+0x64>)
 80025a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	f8ff0000 	.word	0xf8ff0000
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 80025ca:	f107 020f 	add.w	r2, r7, #15
 80025ce:	1df9      	adds	r1, r7, #7
 80025d0:	2364      	movs	r3, #100	; 0x64
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2301      	movs	r3, #1
 80025d6:	4804      	ldr	r0, [pc, #16]	; (80025e8 <W25qxx_Spi+0x28>)
 80025d8:	f003 fab5 	bl	8005b46 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000588 	.word	0x20000588

080025ec <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8002602:	2200      	movs	r2, #0
 8002604:	2102      	movs	r1, #2
 8002606:	4813      	ldr	r0, [pc, #76]	; (8002654 <W25qxx_ReadID+0x68>)
 8002608:	f001 f825 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 800260c:	209f      	movs	r0, #159	; 0x9f
 800260e:	f7ff ffd7 	bl	80025c0 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002612:	20a5      	movs	r0, #165	; 0xa5
 8002614:	f7ff ffd4 	bl	80025c0 <W25qxx_Spi>
 8002618:	4603      	mov	r3, r0
 800261a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800261c:	20a5      	movs	r0, #165	; 0xa5
 800261e:	f7ff ffcf 	bl	80025c0 <W25qxx_Spi>
 8002622:	4603      	mov	r3, r0
 8002624:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002626:	20a5      	movs	r0, #165	; 0xa5
 8002628:	f7ff ffca 	bl	80025c0 <W25qxx_Spi>
 800262c:	4603      	mov	r3, r0
 800262e:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8002630:	2201      	movs	r2, #1
 8002632:	2102      	movs	r1, #2
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <W25qxx_ReadID+0x68>)
 8002636:	f001 f80e 	bl	8003656 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	4313      	orrs	r3, r2
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

	return Temp;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40010c00 	.word	0x40010c00

08002658 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 800265c:	2200      	movs	r2, #0
 800265e:	2102      	movs	r1, #2
 8002660:	4807      	ldr	r0, [pc, #28]	; (8002680 <W25qxx_WriteEnable+0x28>)
 8002662:	f000 fff8 	bl	8003656 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8002666:	2006      	movs	r0, #6
 8002668:	f7ff ffaa 	bl	80025c0 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 800266c:	2201      	movs	r2, #1
 800266e:	2102      	movs	r1, #2
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <W25qxx_WriteEnable+0x28>)
 8002672:	f000 fff0 	bl	8003656 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002676:	2001      	movs	r0, #1
 8002678:	f000 fae8 	bl	8002c4c <HAL_Delay>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40010c00 	.word	0x40010c00

08002684 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002688:	2001      	movs	r0, #1
 800268a:	f000 fadf 	bl	8002c4c <HAL_Delay>
	W25QFLASH_CS_SELECT;
 800268e:	2200      	movs	r2, #0
 8002690:	2102      	movs	r1, #2
 8002692:	480f      	ldr	r0, [pc, #60]	; (80026d0 <W25qxx_WaitForWriteEnd+0x4c>)
 8002694:	f000 ffdf 	bl	8003656 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8002698:	2005      	movs	r0, #5
 800269a:	f7ff ff91 	bl	80025c0 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800269e:	20a5      	movs	r0, #165	; 0xa5
 80026a0:	f7ff ff8e 	bl	80025c0 <W25qxx_Spi>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <W25qxx_WaitForWriteEnd+0x50>)
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f000 facc 	bl	8002c4c <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <W25qxx_WaitForWriteEnd+0x50>)
 80026b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ed      	bne.n	800269e <W25qxx_WaitForWriteEnd+0x1a>

	W25QFLASH_CS_UNSELECT;
 80026c2:	2201      	movs	r2, #1
 80026c4:	2102      	movs	r1, #2
 80026c6:	4802      	ldr	r0, [pc, #8]	; (80026d0 <W25qxx_WaitForWriteEnd+0x4c>)
 80026c8:	f000 ffc5 	bl	8003656 <HAL_GPIO_WritePin>
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40010c00 	.word	0x40010c00
 80026d4:	200009c8 	.word	0x200009c8

080026d8 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80026de:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <W25qxx_Init+0x21c>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 80026e6:	e002      	b.n	80026ee <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f000 faaf 	bl	8002c4c <HAL_Delay>
	while(HAL_GetTick() < 100)
 80026ee:	f000 faa3 	bl	8002c38 <HAL_GetTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b63      	cmp	r3, #99	; 0x63
 80026f6:	d9f7      	bls.n	80026e8 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 80026f8:	2201      	movs	r2, #1
 80026fa:	2102      	movs	r1, #2
 80026fc:	487e      	ldr	r0, [pc, #504]	; (80028f8 <W25qxx_Init+0x220>)
 80026fe:	f000 ffaa 	bl	8003656 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f000 faa2 	bl	8002c4c <HAL_Delay>

	uint32_t id = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
	#endif
	
	id = W25qxx_ReadID();
 800270c:	f7ff ff6e 	bl	80025ec <W25qxx_ReadID>
 8002710:	6078      	str	r0, [r7, #4]
	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
	#endif

	switch(id & 0x0000FFFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f244 0212 	movw	r2, #16402	; 0x4012
 800271a:	4293      	cmp	r3, r2
 800271c:	f000 808a 	beq.w	8002834 <W25qxx_Init+0x15c>
 8002720:	f244 0212 	movw	r2, #16402	; 0x4012
 8002724:	4293      	cmp	r3, r2
 8002726:	d829      	bhi.n	800277c <W25qxx_Init+0xa4>
 8002728:	f243 0214 	movw	r2, #12308	; 0x3014
 800272c:	4293      	cmp	r3, r2
 800272e:	f000 809b 	beq.w	8002868 <W25qxx_Init+0x190>
 8002732:	f243 0214 	movw	r2, #12308	; 0x3014
 8002736:	4293      	cmp	r3, r2
 8002738:	d80f      	bhi.n	800275a <W25qxx_Init+0x82>
 800273a:	f243 0212 	movw	r2, #12306	; 0x3012
 800273e:	4293      	cmp	r3, r2
 8002740:	f000 809a 	beq.w	8002878 <W25qxx_Init+0x1a0>
 8002744:	f243 0212 	movw	r2, #12306	; 0x3012
 8002748:	4293      	cmp	r3, r2
 800274a:	f200 8091 	bhi.w	8002870 <W25qxx_Init+0x198>
 800274e:	f243 0211 	movw	r2, #12305	; 0x3011
 8002752:	4293      	cmp	r3, r2
 8002754:	f000 8094 	beq.w	8002880 <W25qxx_Init+0x1a8>
 8002758:	e096      	b.n	8002888 <W25qxx_Init+0x1b0>
 800275a:	f243 0216 	movw	r2, #12310	; 0x3016
 800275e:	4293      	cmp	r3, r2
 8002760:	d07a      	beq.n	8002858 <W25qxx_Init+0x180>
 8002762:	f243 0216 	movw	r2, #12310	; 0x3016
 8002766:	4293      	cmp	r3, r2
 8002768:	d37a      	bcc.n	8002860 <W25qxx_Init+0x188>
 800276a:	f243 0217 	movw	r2, #12311	; 0x3017
 800276e:	4293      	cmp	r3, r2
 8002770:	d06e      	beq.n	8002850 <W25qxx_Init+0x178>
 8002772:	f244 0211 	movw	r2, #16401	; 0x4011
 8002776:	4293      	cmp	r3, r2
 8002778:	d063      	beq.n	8002842 <W25qxx_Init+0x16a>
 800277a:	e085      	b.n	8002888 <W25qxx_Init+0x1b0>
 800277c:	f244 0216 	movw	r2, #16406	; 0x4016
 8002780:	4293      	cmp	r3, r2
 8002782:	d03b      	beq.n	80027fc <W25qxx_Init+0x124>
 8002784:	f244 0216 	movw	r2, #16406	; 0x4016
 8002788:	4293      	cmp	r3, r2
 800278a:	d808      	bhi.n	800279e <W25qxx_Init+0xc6>
 800278c:	f244 0214 	movw	r2, #16404	; 0x4014
 8002790:	4293      	cmp	r3, r2
 8002792:	d041      	beq.n	8002818 <W25qxx_Init+0x140>
 8002794:	f244 0214 	movw	r2, #16404	; 0x4014
 8002798:	4293      	cmp	r3, r2
 800279a:	d836      	bhi.n	800280a <W25qxx_Init+0x132>
 800279c:	e043      	b.n	8002826 <W25qxx_Init+0x14e>
 800279e:	f244 0218 	movw	r2, #16408	; 0x4018
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01b      	beq.n	80027de <W25qxx_Init+0x106>
 80027a6:	f244 0218 	movw	r2, #16408	; 0x4018
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d31f      	bcc.n	80027ee <W25qxx_Init+0x116>
 80027ae:	f244 0219 	movw	r2, #16409	; 0x4019
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <W25qxx_Init+0xf6>
 80027b6:	f244 021a 	movw	r2, #16410	; 0x401a
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d164      	bne.n	8002888 <W25qxx_Init+0x1b0>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 80027be:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <W25qxx_Init+0x21c>)
 80027c0:	220a      	movs	r2, #10
 80027c2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <W25qxx_Init+0x21c>)
 80027c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ca:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
			#endif
		break;
 80027cc:	e062      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <W25qxx_Init+0x21c>)
 80027d0:	2209      	movs	r2, #9
 80027d2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 80027d4:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <W25qxx_Init+0x21c>)
 80027d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027da:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
			#endif
		break;
 80027dc:	e05a      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 80027de:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <W25qxx_Init+0x21c>)
 80027e0:	2208      	movs	r2, #8
 80027e2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <W25qxx_Init+0x21c>)
 80027e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ea:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
			#endif
		break;
 80027ec:	e052      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <W25qxx_Init+0x21c>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 80027f4:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <W25qxx_Init+0x21c>)
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
			#endif
		break;
 80027fa:	e04b      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <W25qxx_Init+0x21c>)
 80027fe:	2206      	movs	r2, #6
 8002800:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <W25qxx_Init+0x21c>)
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
			#endif
		break;
 8002808:	e044      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <W25qxx_Init+0x21c>)
 800280c:	2205      	movs	r2, #5
 800280e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8002810:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <W25qxx_Init+0x21c>)
 8002812:	2220      	movs	r2, #32
 8002814:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
			#endif
		break;
 8002816:	e03d      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <W25qxx_Init+0x21c>)
 800281a:	2204      	movs	r2, #4
 800281c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <W25qxx_Init+0x21c>)
 8002820:	2210      	movs	r2, #16
 8002822:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
			#endif
		break;
 8002824:	e036      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8002826:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <W25qxx_Init+0x21c>)
 8002828:	2203      	movs	r2, #3
 800282a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <W25qxx_Init+0x21c>)
 800282e:	2208      	movs	r2, #8
 8002830:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
			#endif
		break;
 8002832:	e02f      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <W25qxx_Init+0x21c>)
 8002836:	2202      	movs	r2, #2
 8002838:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <W25qxx_Init+0x21c>)
 800283c:	2204      	movs	r2, #4
 800283e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
			#endif
		break;
 8002840:	e028      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <W25qxx_Init+0x21c>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <W25qxx_Init+0x21c>)
 800284a:	2202      	movs	r2, #2
 800284c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
			#endif
		break;
 800284e:	e021      	b.n	8002894 <W25qxx_Init+0x1bc>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <W25qxx_Init+0x21c>)
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
			#endif
		break;
 8002856:	e01d      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <W25qxx_Init+0x21c>)
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
			#endif
		break;
 800285e:	e019      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8002860:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <W25qxx_Init+0x21c>)
 8002862:	2220      	movs	r2, #32
 8002864:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
			#endif
		break;
 8002866:	e015      	b.n	8002894 <W25qxx_Init+0x1bc>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <W25qxx_Init+0x21c>)
 800286a:	2210      	movs	r2, #16
 800286c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
			#endif
		break;
 800286e:	e011      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <W25qxx_Init+0x21c>)
 8002872:	2208      	movs	r2, #8
 8002874:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
			#endif
		break;
 8002876:	e00d      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <W25qxx_Init+0x21c>)
 800287a:	2204      	movs	r2, #4
 800287c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
			#endif
		break;
 800287e:	e009      	b.n	8002894 <W25qxx_Init+0x1bc>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <W25qxx_Init+0x21c>)
 8002882:	2202      	movs	r2, #2
 8002884:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
			#endif
		break;
 8002886:	e005      	b.n	8002894 <W25qxx_Init+0x1bc>
		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
			#endif

			w25qxx.Lock = 0;
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <W25qxx_Init+0x21c>)
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8002890:	2300      	movs	r3, #0
 8002892:	e02b      	b.n	80028ec <W25qxx_Init+0x214>
	}


	w25qxx.PageSize = 256;
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <W25qxx_Init+0x21c>)
 8002896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <W25qxx_Init+0x21c>)
 800289e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a2:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <W25qxx_Init+0x21c>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <W25qxx_Init+0x21c>)
 80028ac:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <W25qxx_Init+0x21c>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <W25qxx_Init+0x21c>)
 80028b4:	6912      	ldr	r2, [r2, #16]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <W25qxx_Init+0x21c>)
 80028bc:	8952      	ldrh	r2, [r2, #10]
 80028be:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <W25qxx_Init+0x21c>)
 80028c4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <W25qxx_Init+0x21c>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <W25qxx_Init+0x21c>)
 80028ce:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <W25qxx_Init+0x21c>)
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <W25qxx_Init+0x21c>)
 80028d6:	6912      	ldr	r2, [r2, #16]
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	0a9b      	lsrs	r3, r3, #10
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <W25qxx_Init+0x21c>)
 80028e0:	6213      	str	r3, [r2, #32]
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
	#endif

	w25qxx.Lock = 0;
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <W25qxx_Init+0x21c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80028ea:	2301      	movs	r3, #1
}	
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200009c8 	.word	0x200009c8
 80028f8:	40010c00 	.word	0x40010c00

080028fc <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 8002904:	e002      	b.n	800290c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8002906:	2001      	movs	r0, #1
 8002908:	f000 f9a0 	bl	8002c4c <HAL_Delay>
	while(w25qxx.Lock == 1)
 800290c:	4b23      	ldr	r3, [pc, #140]	; (800299c <W25qxx_EraseSector+0xa0>)
 800290e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002912:	2b01      	cmp	r3, #1
 8002914:	d0f7      	beq.n	8002906 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <W25qxx_EraseSector+0xa0>)
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 800291e:	f7ff feb1 	bl	8002684 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <W25qxx_EraseSector+0xa0>)
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 800292e:	f7ff fe93 	bl	8002658 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8002932:	2200      	movs	r2, #0
 8002934:	2102      	movs	r1, #2
 8002936:	481a      	ldr	r0, [pc, #104]	; (80029a0 <W25qxx_EraseSector+0xa4>)
 8002938:	f000 fe8d 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 800293c:	2020      	movs	r0, #32
 800293e:	f7ff fe3f 	bl	80025c0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <W25qxx_EraseSector+0xa0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d905      	bls.n	8002956 <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0e1b      	lsrs	r3, r3, #24
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fe35 	bl	80025c0 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fe2f 	bl	80025c0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fe29 	bl	80025c0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fe24 	bl	80025c0 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8002978:	2201      	movs	r2, #1
 800297a:	2102      	movs	r1, #2
 800297c:	4808      	ldr	r0, [pc, #32]	; (80029a0 <W25qxx_EraseSector+0xa4>)
 800297e:	f000 fe6a 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8002982:	f7ff fe7f 	bl	8002684 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 f960 	bl	8002c4c <HAL_Delay>
	w25qxx.Lock = 0;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <W25qxx_EraseSector+0xa0>)
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200009c8 	.word	0x200009c8
 80029a0:	40010c00 	.word	0x40010c00

080029a4 <W25qxx_WriteByte>:
	return 1;
}

//###################################################################################################################
void W25qxx_WriteByte(uint8_t byte, uint32_t addr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock == 1)
 80029b0:	e002      	b.n	80029b8 <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f000 f94a 	bl	8002c4c <HAL_Delay>
	while(w25qxx.Lock == 1)
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <W25qxx_WriteByte+0x9c>)
 80029ba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d0f7      	beq.n	80029b2 <W25qxx_WriteByte+0xe>

	w25qxx.Lock = 1;
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <W25qxx_WriteByte+0x9c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80029ca:	f7ff fe5b 	bl	8002684 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80029ce:	f7ff fe43 	bl	8002658 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80029d2:	2200      	movs	r2, #0
 80029d4:	2102      	movs	r1, #2
 80029d6:	481b      	ldr	r0, [pc, #108]	; (8002a44 <W25qxx_WriteByte+0xa0>)
 80029d8:	f000 fe3d 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 80029dc:	2002      	movs	r0, #2
 80029de:	f7ff fdef 	bl	80025c0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <W25qxx_WriteByte+0x9c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d905      	bls.n	80029f6 <W25qxx_WriteByte+0x52>
		W25qxx_Spi((addr & 0xFF000000) >> 24);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	0e1b      	lsrs	r3, r3, #24
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fde5 	bl	80025c0 <W25qxx_Spi>

	W25qxx_Spi((addr & 0xFF0000) >> 16);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fddf 	bl	80025c0 <W25qxx_Spi>
	W25qxx_Spi((addr & 0xFF00) >> 8);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fdd9 	bl	80025c0 <W25qxx_Spi>
	W25qxx_Spi(addr & 0xFF);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fdd4 	bl	80025c0 <W25qxx_Spi>

	W25qxx_Spi(byte);
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fdd0 	bl	80025c0 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8002a20:	2201      	movs	r2, #1
 8002a22:	2102      	movs	r1, #2
 8002a24:	4807      	ldr	r0, [pc, #28]	; (8002a44 <W25qxx_WriteByte+0xa0>)
 8002a26:	f000 fe16 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8002a2a:	f7ff fe2b 	bl	8002684 <W25qxx_WaitForWriteEnd>

	w25qxx.Lock = 0;
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <W25qxx_WriteByte+0x9c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200009c8 	.word	0x200009c8
 8002a44:	40010c00 	.word	0x40010c00

08002a48 <W25qxx_ReadPage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8002a56:	e002      	b.n	8002a5e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f000 f8f7 	bl	8002c4c <HAL_Delay>
	while(w25qxx.Lock==1)
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002a60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d0f7      	beq.n	8002a58 <W25qxx_ReadPage+0x10>

	w25qxx.Lock = 1;
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize) || (NumByteToRead_up_to_PageSize==0))
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002a72:	895b      	ldrh	r3, [r3, #10]
 8002a74:	461a      	mov	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d802      	bhi.n	8002a82 <W25qxx_ReadPage+0x3a>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002a84:	895b      	ldrh	r3, [r3, #10]
 8002a86:	603b      	str	r3, [r7, #0]

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002a90:	8952      	ldrh	r2, [r2, #10]
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d905      	bls.n	8002aa2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002a98:	895b      	ldrh	r3, [r3, #10]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002aa4:	895b      	ldrh	r3, [r3, #10]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	fb03 f302 	mul.w	r3, r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
	W25QFLASH_CS_SELECT;
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	481e      	ldr	r0, [pc, #120]	; (8002b34 <W25qxx_ReadPage+0xec>)
 8002aba:	f000 fdcc 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8002abe:	200b      	movs	r0, #11
 8002ac0:	f7ff fd7e 	bl	80025c0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d905      	bls.n	8002ad8 <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0e1b      	lsrs	r3, r3, #24
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fd74 	bl	80025c0 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fd6e 	bl	80025c0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd68 	bl	80025c0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fd63 	bl	80025c0 <W25qxx_Spi>

	W25qxx_Spi(0);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7ff fd60 	bl	80025c0 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	2364      	movs	r3, #100	; 0x64
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	480b      	ldr	r0, [pc, #44]	; (8002b38 <W25qxx_ReadPage+0xf0>)
 8002b0a:	f002 ff0b 	bl	8005924 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead_up_to_PageSize--;
	}*/

	W25QFLASH_CS_UNSELECT;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2102      	movs	r1, #2
 8002b12:	4808      	ldr	r0, [pc, #32]	; (8002b34 <W25qxx_ReadPage+0xec>)
 8002b14:	f000 fd9f 	bl	8003656 <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f000 f897 	bl	8002c4c <HAL_Delay>
	w25qxx.Lock=0;
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <W25qxx_ReadPage+0xe8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200009c8 	.word	0x200009c8
 8002b34:	40010c00 	.word	0x40010c00
 8002b38:	20000588 	.word	0x20000588

08002b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b3e:	e003      	b.n	8002b48 <LoopCopyDataInit>

08002b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b46:	3104      	adds	r1, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b50:	d3f6      	bcc.n	8002b40 <CopyDataInit>
  ldr r2, =_sbss
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b54:	e002      	b.n	8002b5c <LoopFillZerobss>

08002b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b58:	f842 3b04 	str.w	r3, [r2], #4

08002b5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b60:	d3f9      	bcc.n	8002b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b62:	f7ff fcf9 	bl	8002558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b66:	f004 fd8d 	bl	8007684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b6a:	f7fe fd2f 	bl	80015cc <main>
  bx lr
 8002b6e:	4770      	bx	lr
  ldr r3, =_sidata
 8002b70:	08008054 	.word	0x08008054
  ldr r0, =_sdata
 8002b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b78:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8002b7c:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8002b80:	20000e5c 	.word	0x20000e5c

08002b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC1_2_IRQHandler>
	...

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_Init+0x28>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_Init+0x28>)
 8002b92:	f043 0310 	orr.w	r3, r3, #16
 8002b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f945 	bl	8002e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f808 	bl	8002bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba4:	f7ff f9a4 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40022000 	.word	0x40022000

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_InitTick+0x54>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x58>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f95d 	bl	8002e92 <HAL_SYSTICK_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00e      	b.n	8002c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d80a      	bhi.n	8002bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be8:	2200      	movs	r2, #0
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf0:	f000 f925 	bl	8002e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <HAL_InitTick+0x5c>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	20000010 	.word	0x20000010
 8002c10:	2000000c 	.word	0x2000000c

08002c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_IncTick+0x1c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_IncTick+0x20>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <HAL_IncTick+0x20>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000010 	.word	0x20000010
 8002c34:	200009f0 	.word	0x200009f0

08002c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c3c:	4b02      	ldr	r3, [pc, #8]	; (8002c48 <HAL_GetTick+0x10>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	200009f0 	.word	0x200009f0

08002c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7ff fff0 	bl	8002c38 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d005      	beq.n	8002c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_Delay+0x40>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c72:	bf00      	nop
 8002c74:	f7ff ffe0 	bl	8002c38 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8f7      	bhi.n	8002c74 <HAL_Delay+0x28>
  {
  }
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000010 	.word	0x20000010

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <__NVIC_EnableIRQ+0x34>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df4:	d301      	bcc.n	8002dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00f      	b.n	8002e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <SysTick_Config+0x40>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e02:	210f      	movs	r1, #15
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e08:	f7ff ff90 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <SysTick_Config+0x40>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <SysTick_Config+0x40>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000e010 	.word	0xe000e010

08002e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff2d 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e50:	f7ff ff42 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff90 	bl	8002d80 <NVIC_EncodePriority>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff5f 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff35 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffa2 	bl	8002de4 <SysTick_Config>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e043      	b.n	8002f4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_DMA_Init+0xa8>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_DMA_Init+0xac>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	009a      	lsls	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_DMA_Init+0xb0>)
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ef6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002efa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	bffdfff8 	.word	0xbffdfff8
 8002f58:	cccccccd 	.word	0xcccccccd
 8002f5c:	40020000 	.word	0x40020000

08002f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Start_IT+0x20>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e04a      	b.n	8003016 <HAL_DMA_Start_IT+0xb6>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d13a      	bne.n	8003008 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f9ae 	bl	8003318 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 020e 	orr.w	r2, r2, #14
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0204 	bic.w	r2, r2, #4
 8002fe4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 020a 	orr.w	r2, r2, #10
 8002ff4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e005      	b.n	8003014 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003032:	2b02      	cmp	r3, #2
 8003034:	d005      	beq.n	8003042 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e051      	b.n	80030e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020e 	bic.w	r2, r2, #14
 8003050:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_DMA_Abort_IT+0xd0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d029      	beq.n	80030c0 <HAL_DMA_Abort_IT+0xa0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_DMA_Abort_IT+0xd4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d022      	beq.n	80030bc <HAL_DMA_Abort_IT+0x9c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_DMA_Abort_IT+0xd8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d01a      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x96>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_DMA_Abort_IT+0xdc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d012      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x90>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_DMA_Abort_IT+0xe0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00a      	beq.n	80030aa <HAL_DMA_Abort_IT+0x8a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_DMA_Abort_IT+0xe4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d102      	bne.n	80030a4 <HAL_DMA_Abort_IT+0x84>
 800309e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030a2:	e00e      	b.n	80030c2 <HAL_DMA_Abort_IT+0xa2>
 80030a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a8:	e00b      	b.n	80030c2 <HAL_DMA_Abort_IT+0xa2>
 80030aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ae:	e008      	b.n	80030c2 <HAL_DMA_Abort_IT+0xa2>
 80030b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b4:	e005      	b.n	80030c2 <HAL_DMA_Abort_IT+0xa2>
 80030b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ba:	e002      	b.n	80030c2 <HAL_DMA_Abort_IT+0xa2>
 80030bc:	2310      	movs	r3, #16
 80030be:	e000      	b.n	80030c2 <HAL_DMA_Abort_IT+0xa2>
 80030c0:	2301      	movs	r3, #1
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HAL_DMA_Abort_IT+0xe8>)
 80030c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
    } 
  }
  return status;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40020008 	.word	0x40020008
 80030f4:	4002001c 	.word	0x4002001c
 80030f8:	40020030 	.word	0x40020030
 80030fc:	40020044 	.word	0x40020044
 8003100:	40020058 	.word	0x40020058
 8003104:	4002006c 	.word	0x4002006c
 8003108:	40020000 	.word	0x40020000

0800310c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2204      	movs	r2, #4
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d04f      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xc8>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0204 	bic.w	r2, r2, #4
 800315a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a66      	ldr	r2, [pc, #408]	; (80032fc <HAL_DMA_IRQHandler+0x1f0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d029      	beq.n	80031ba <HAL_DMA_IRQHandler+0xae>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_DMA_IRQHandler+0x1f4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xaa>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a63      	ldr	r2, [pc, #396]	; (8003304 <HAL_DMA_IRQHandler+0x1f8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xa4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a62      	ldr	r2, [pc, #392]	; (8003308 <HAL_DMA_IRQHandler+0x1fc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d012      	beq.n	80031aa <HAL_DMA_IRQHandler+0x9e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a60      	ldr	r2, [pc, #384]	; (800330c <HAL_DMA_IRQHandler+0x200>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x98>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5f      	ldr	r2, [pc, #380]	; (8003310 <HAL_DMA_IRQHandler+0x204>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d102      	bne.n	800319e <HAL_DMA_IRQHandler+0x92>
 8003198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800319c:	e00e      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 800319e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031a2:	e00b      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031a8:	e008      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ae:	e005      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b4:	e002      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031b6:	2340      	movs	r3, #64	; 0x40
 80031b8:	e000      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031ba:	2304      	movs	r3, #4
 80031bc:	4a55      	ldr	r2, [pc, #340]	; (8003314 <HAL_DMA_IRQHandler+0x208>)
 80031be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8094 	beq.w	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031d2:	e08e      	b.n	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2202      	movs	r2, #2
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d056      	beq.n	8003292 <HAL_DMA_IRQHandler+0x186>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d051      	beq.n	8003292 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 020a 	bic.w	r2, r2, #10
 800320a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a38      	ldr	r2, [pc, #224]	; (80032fc <HAL_DMA_IRQHandler+0x1f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d029      	beq.n	8003272 <HAL_DMA_IRQHandler+0x166>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a37      	ldr	r2, [pc, #220]	; (8003300 <HAL_DMA_IRQHandler+0x1f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_IRQHandler+0x162>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a35      	ldr	r2, [pc, #212]	; (8003304 <HAL_DMA_IRQHandler+0x1f8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x15c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a34      	ldr	r2, [pc, #208]	; (8003308 <HAL_DMA_IRQHandler+0x1fc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d012      	beq.n	8003262 <HAL_DMA_IRQHandler+0x156>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a32      	ldr	r2, [pc, #200]	; (800330c <HAL_DMA_IRQHandler+0x200>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00a      	beq.n	800325c <HAL_DMA_IRQHandler+0x150>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a31      	ldr	r2, [pc, #196]	; (8003310 <HAL_DMA_IRQHandler+0x204>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d102      	bne.n	8003256 <HAL_DMA_IRQHandler+0x14a>
 8003250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003254:	e00e      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800325a:	e00b      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 800325c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003260:	e008      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003266:	e005      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326c:	e002      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 800326e:	2320      	movs	r3, #32
 8003270:	e000      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003272:	2302      	movs	r3, #2
 8003274:	4a27      	ldr	r2, [pc, #156]	; (8003314 <HAL_DMA_IRQHandler+0x208>)
 8003276:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d034      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003290:	e02f      	b.n	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2208      	movs	r2, #8
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d028      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x1e8>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020e 	bic.w	r2, r2, #14
 80032ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
    }
  }
  return;
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
}
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40020008 	.word	0x40020008
 8003300:	4002001c 	.word	0x4002001c
 8003304:	40020030 	.word	0x40020030
 8003308:	40020044 	.word	0x40020044
 800330c:	40020058 	.word	0x40020058
 8003310:	4002006c 	.word	0x4002006c
 8003314:	40020000 	.word	0x40020000

08003318 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b10      	cmp	r3, #16
 8003344:	d108      	bne.n	8003358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003356:	e007      	b.n	8003368 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
	...

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003386:	e127      	b.n	80035d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003388:	2201      	movs	r2, #1
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 8116 	bne.w	80035d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b12      	cmp	r3, #18
 80033ac:	d034      	beq.n	8003418 <HAL_GPIO_Init+0xa4>
 80033ae:	2b12      	cmp	r3, #18
 80033b0:	d80d      	bhi.n	80033ce <HAL_GPIO_Init+0x5a>
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d02b      	beq.n	800340e <HAL_GPIO_Init+0x9a>
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d804      	bhi.n	80033c4 <HAL_GPIO_Init+0x50>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d031      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d01c      	beq.n	80033fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033c2:	e048      	b.n	8003456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d043      	beq.n	8003450 <HAL_GPIO_Init+0xdc>
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d01b      	beq.n	8003404 <HAL_GPIO_Init+0x90>
          break;
 80033cc:	e043      	b.n	8003456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033ce:	4a89      	ldr	r2, [pc, #548]	; (80035f4 <HAL_GPIO_Init+0x280>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d026      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033d4:	4a87      	ldr	r2, [pc, #540]	; (80035f4 <HAL_GPIO_Init+0x280>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d806      	bhi.n	80033e8 <HAL_GPIO_Init+0x74>
 80033da:	4a87      	ldr	r2, [pc, #540]	; (80035f8 <HAL_GPIO_Init+0x284>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d020      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033e0:	4a86      	ldr	r2, [pc, #536]	; (80035fc <HAL_GPIO_Init+0x288>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_GPIO_Init+0xae>
          break;
 80033e6:	e036      	b.n	8003456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033e8:	4a85      	ldr	r2, [pc, #532]	; (8003600 <HAL_GPIO_Init+0x28c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033ee:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_GPIO_Init+0x290>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d016      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033f4:	4a84      	ldr	r2, [pc, #528]	; (8003608 <HAL_GPIO_Init+0x294>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0xae>
          break;
 80033fa:	e02c      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	623b      	str	r3, [r7, #32]
          break;
 8003402:	e028      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	623b      	str	r3, [r7, #32]
          break;
 800340c:	e023      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	3308      	adds	r3, #8
 8003414:	623b      	str	r3, [r7, #32]
          break;
 8003416:	e01e      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	330c      	adds	r3, #12
 800341e:	623b      	str	r3, [r7, #32]
          break;
 8003420:	e019      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800342a:	2304      	movs	r3, #4
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e012      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003438:	2308      	movs	r3, #8
 800343a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	611a      	str	r2, [r3, #16]
          break;
 8003442:	e008      	b.n	8003456 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003444:	2308      	movs	r3, #8
 8003446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	615a      	str	r2, [r3, #20]
          break;
 800344e:	e002      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
          break;
 8003454:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d801      	bhi.n	8003460 <HAL_GPIO_Init+0xec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	e001      	b.n	8003464 <HAL_GPIO_Init+0xf0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2bff      	cmp	r3, #255	; 0xff
 800346a:	d802      	bhi.n	8003472 <HAL_GPIO_Init+0xfe>
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x104>
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	3b08      	subs	r3, #8
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	210f      	movs	r1, #15
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	401a      	ands	r2, r3
 800348a:	6a39      	ldr	r1, [r7, #32]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8096 	beq.w	80035d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_GPIO_Init+0x298>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_GPIO_Init+0x298>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6193      	str	r3, [r2, #24]
 80034b2:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_GPIO_Init+0x298>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034be:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_GPIO_Init+0x29c>)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_GPIO_Init+0x2a0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0x19e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <HAL_GPIO_Init+0x2a4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00d      	beq.n	800350e <HAL_GPIO_Init+0x19a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a49      	ldr	r2, [pc, #292]	; (800361c <HAL_GPIO_Init+0x2a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <HAL_GPIO_Init+0x196>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a48      	ldr	r2, [pc, #288]	; (8003620 <HAL_GPIO_Init+0x2ac>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_GPIO_Init+0x192>
 8003502:	2303      	movs	r3, #3
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 8003506:	2304      	movs	r3, #4
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 8003512:	2300      	movs	r3, #0
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003524:	493a      	ldr	r1, [pc, #232]	; (8003610 <HAL_GPIO_Init+0x29c>)
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4938      	ldr	r1, [pc, #224]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
 800354a:	e006      	b.n	800355a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	43db      	mvns	r3, r3
 8003554:	4933      	ldr	r1, [pc, #204]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003556:	4013      	ands	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	492e      	ldr	r1, [pc, #184]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
 8003572:	e006      	b.n	8003582 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	43db      	mvns	r3, r3
 800357c:	4929      	ldr	r1, [pc, #164]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800357e:	4013      	ands	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4924      	ldr	r1, [pc, #144]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
 800359a:	e006      	b.n	80035aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	491f      	ldr	r1, [pc, #124]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	491a      	ldr	r1, [pc, #104]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
 80035c2:	e006      	b.n	80035d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4915      	ldr	r1, [pc, #84]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	3301      	adds	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f47f aed0 	bne.w	8003388 <HAL_GPIO_Init+0x14>
  }
}
 80035e8:	bf00      	nop
 80035ea:	372c      	adds	r7, #44	; 0x2c
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	10210000 	.word	0x10210000
 80035f8:	10110000 	.word	0x10110000
 80035fc:	10120000 	.word	0x10120000
 8003600:	10310000 	.word	0x10310000
 8003604:	10320000 	.word	0x10320000
 8003608:	10220000 	.word	0x10220000
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e001      	b.n	800364a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	807b      	strh	r3, [r7, #2]
 8003662:	4613      	mov	r3, r2
 8003664:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003666:	787b      	ldrb	r3, [r7, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003672:	e003      	b.n	800367c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
	...

08003688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fb04 	bl	8001cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40010400 	.word	0x40010400

080036b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e11f      	b.n	800390a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe fc38 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800371a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800371c:	f002 f838 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8003720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a7b      	ldr	r2, [pc, #492]	; (8003914 <HAL_I2C_Init+0x25c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d807      	bhi.n	800373c <HAL_I2C_Init+0x84>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a7a      	ldr	r2, [pc, #488]	; (8003918 <HAL_I2C_Init+0x260>)
 8003730:	4293      	cmp	r3, r2
 8003732:	bf94      	ite	ls
 8003734:	2301      	movls	r3, #1
 8003736:	2300      	movhi	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e006      	b.n	800374a <HAL_I2C_Init+0x92>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_I2C_Init+0x264>)
 8003740:	4293      	cmp	r3, r2
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0db      	b.n	800390a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a72      	ldr	r2, [pc, #456]	; (8003920 <HAL_I2C_Init+0x268>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0c9b      	lsrs	r3, r3, #18
 800375c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a64      	ldr	r2, [pc, #400]	; (8003914 <HAL_I2C_Init+0x25c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d802      	bhi.n	800378c <HAL_I2C_Init+0xd4>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	e009      	b.n	80037a0 <HAL_I2C_Init+0xe8>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	4a63      	ldr	r2, [pc, #396]	; (8003924 <HAL_I2C_Init+0x26c>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	3301      	adds	r3, #1
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4956      	ldr	r1, [pc, #344]	; (8003914 <HAL_I2C_Init+0x25c>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d80d      	bhi.n	80037dc <HAL_I2C_Init+0x124>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e59      	subs	r1, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	bf38      	it	cc
 80037d8:	2304      	movcc	r3, #4
 80037da:	e04f      	b.n	800387c <HAL_I2C_Init+0x1c4>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <HAL_I2C_Init+0x150>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e012      	b.n	800382e <HAL_I2C_Init+0x176>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	0099      	lsls	r1, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x17e>
 8003832:	2301      	movs	r3, #1
 8003834:	e022      	b.n	800387c <HAL_I2C_Init+0x1c4>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <HAL_I2C_Init+0x1a4>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e58      	subs	r0, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	440b      	add	r3, r1
 800384c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385a:	e00f      	b.n	800387c <HAL_I2C_Init+0x1c4>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	6809      	ldr	r1, [r1, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6911      	ldr	r1, [r2, #16]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	000186a0 	.word	0x000186a0
 8003918:	001e847f 	.word	0x001e847f
 800391c:	003d08ff 	.word	0x003d08ff
 8003920:	431bde83 	.word	0x431bde83
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	461a      	mov	r2, r3
 8003934:	460b      	mov	r3, r1
 8003936:	817b      	strh	r3, [r7, #10]
 8003938:	4613      	mov	r3, r2
 800393a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff f97c 	bl	8002c38 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b20      	cmp	r3, #32
 800394c:	f040 80e0 	bne.w	8003b10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	4970      	ldr	r1, [pc, #448]	; (8003b1c <HAL_I2C_Master_Transmit+0x1f4>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f001 f966 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	e0d3      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x50>
 8003974:	2302      	movs	r3, #2
 8003976:	e0cc      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d007      	beq.n	800399e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2210      	movs	r2, #16
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	893a      	ldrh	r2, [r7, #8]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a50      	ldr	r2, [pc, #320]	; (8003b20 <HAL_I2C_Master_Transmit+0x1f8>)
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fe52 	bl	8004690 <I2C_MasterRequestWrite>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e08d      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a0c:	e066      	b.n	8003adc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f001 f9e0 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x188>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f001 f9d0 	bl	8004e5a <I2C_WaitOnBTFFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d107      	bne.n	8003ad8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e01a      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d194      	bne.n	8003a0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00100002 	.word	0x00100002
 8003b20:	ffff0000 	.word	0xffff0000

08003b24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	460b      	mov	r3, r1
 8003b32:	817b      	strh	r3, [r7, #10]
 8003b34:	4613      	mov	r3, r2
 8003b36:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7ff f87c 	bl	8002c38 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	f040 8238 	bne.w	8003fc0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2319      	movs	r3, #25
 8003b56:	2201      	movs	r2, #1
 8003b58:	497e      	ldr	r1, [pc, #504]	; (8003d54 <HAL_I2C_Master_Receive+0x230>)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f001 f866 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	e22b      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_I2C_Master_Receive+0x54>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e224      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d007      	beq.n	8003b9e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2222      	movs	r2, #34	; 0x22
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	893a      	ldrh	r2, [r7, #8]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a5e      	ldr	r2, [pc, #376]	; (8003d58 <HAL_I2C_Master_Receive+0x234>)
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be0:	8979      	ldrh	r1, [r7, #10]
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fdd4 	bl	8004794 <I2C_MasterRequestRead>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1e5      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d113      	bne.n	8003c26 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e1b9      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d11d      	bne.n	8003c6a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c66:	b662      	cpsie	i
 8003c68:	e197      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d11d      	bne.n	8003cae <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003caa:	b662      	cpsie	i
 8003cac:	e175      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003cd4:	e161      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f200 811a 	bhi.w	8003f14 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d123      	bne.n	8003d30 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f001 f8f5 	bl	8004edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e162      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d2e:	e134      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d150      	bne.n	8003dda <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4906      	ldr	r1, [pc, #24]	; (8003d5c <HAL_I2C_Master_Receive+0x238>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 ff72 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e137      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
 8003d52:	bf00      	nop
 8003d54:	00100002 	.word	0x00100002
 8003d58:	ffff0000 	.word	0xffff0000
 8003d5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d70:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003da4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd8:	e0df      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	2200      	movs	r2, #0
 8003de2:	497a      	ldr	r1, [pc, #488]	; (8003fcc <HAL_I2C_Master_Receive+0x4a8>)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 ff21 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0e6      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e04:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e38:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_I2C_Master_Receive+0x4ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	4a65      	ldr	r2, [pc, #404]	; (8003fd4 <HAL_I2C_Master_Receive+0x4b0>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	0a1a      	lsrs	r2, r3, #8
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00da      	lsls	r2, r3, #3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d117      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e80:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e099      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d1da      	bne.n	8003e52 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ede:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f12:	e042      	b.n	8003f9a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 ffdf 	bl	8004edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e04c      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d118      	bne.n	8003f9a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f47f ae99 	bne.w	8003cd6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	00010004 	.word	0x00010004
 8003fd0:	20000008 	.word	0x20000008
 8003fd4:	14f8b589 	.word	0x14f8b589

08003fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	460b      	mov	r3, r1
 8003fec:	813b      	strh	r3, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff2:	f7fe fe21 	bl	8002c38 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b20      	cmp	r3, #32
 8004002:	f040 80d9 	bne.w	80041b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2319      	movs	r3, #25
 800400c:	2201      	movs	r2, #1
 800400e:	496d      	ldr	r1, [pc, #436]	; (80041c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fe0b 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	e0cc      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_I2C_Mem_Write+0x56>
 800402a:	2302      	movs	r3, #2
 800402c:	e0c5      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d007      	beq.n	8004054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2221      	movs	r2, #33	; 0x21
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a4d      	ldr	r2, [pc, #308]	; (80041c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004096:	88f8      	ldrh	r0, [r7, #6]
 8004098:	893a      	ldrh	r2, [r7, #8]
 800409a:	8979      	ldrh	r1, [r7, #10]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4603      	mov	r3, r0
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fc42 	bl	8004930 <I2C_RequestMemoryWrite>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d052      	beq.n	8004158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e081      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fe8c 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_I2C_Mem_Write+0x180>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1aa      	bne.n	80040b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fe78 	bl	8004e5a <I2C_WaitOnBTFFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00d      	beq.n	800418c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2b04      	cmp	r3, #4
 8004176:	d107      	bne.n	8004188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e016      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000

080041cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041ea:	f7fe fd25 	bl	8002c38 <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	f040 823d 	bne.w	8004678 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2319      	movs	r3, #25
 8004204:	2201      	movs	r2, #1
 8004206:	4981      	ldr	r1, [pc, #516]	; (800440c <HAL_I2C_Mem_Read+0x240>)
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fd0f 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
 8004216:	e230      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_I2C_Mem_Read+0x5a>
 8004222:	2302      	movs	r3, #2
 8004224:	e229      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	d007      	beq.n	800424c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2222      	movs	r2, #34	; 0x22
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2240      	movs	r2, #64	; 0x40
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800427c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a61      	ldr	r2, [pc, #388]	; (8004410 <HAL_I2C_Mem_Read+0x244>)
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800428e:	88f8      	ldrh	r0, [r7, #6]
 8004290:	893a      	ldrh	r2, [r7, #8]
 8004292:	8979      	ldrh	r1, [r7, #10]
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4603      	mov	r3, r0
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fbdc 	bl	8004a5c <I2C_RequestMemoryRead>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1e5      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d113      	bne.n	80042de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e1b9      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d11d      	bne.n	8004322 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042f6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800431e:	b662      	cpsie	i
 8004320:	e197      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b02      	cmp	r3, #2
 8004328:	d11d      	bne.n	8004366 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004338:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800433a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004362:	b662      	cpsie	i
 8004364:	e175      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004374:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800438c:	e161      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	2b03      	cmp	r3, #3
 8004394:	f200 811a 	bhi.w	80045cc <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	2b01      	cmp	r3, #1
 800439e:	d123      	bne.n	80043e8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fd99 	bl	8004edc <I2C_WaitOnRXNEFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e162      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043e6:	e134      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d150      	bne.n	8004492 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2200      	movs	r2, #0
 80043f8:	4906      	ldr	r1, [pc, #24]	; (8004414 <HAL_I2C_Mem_Read+0x248>)
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fc16 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e137      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
 800440a:	bf00      	nop
 800440c:	00100002 	.word	0x00100002
 8004410:	ffff0000 	.word	0xffff0000
 8004414:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800445c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004490:	e0df      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	2200      	movs	r2, #0
 800449a:	497a      	ldr	r1, [pc, #488]	; (8004684 <HAL_I2C_Mem_Read+0x4b8>)
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fbc5 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0e6      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044bc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044f0:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_I2C_Mem_Read+0x4bc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	4a65      	ldr	r2, [pc, #404]	; (800468c <HAL_I2C_Mem_Read+0x4c0>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	0a1a      	lsrs	r2, r3, #8
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00da      	lsls	r2, r3, #3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	3b01      	subs	r3, #1
 800450e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d117      	bne.n	8004546 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004538:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e099      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d1da      	bne.n	800450a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004596:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ca:	e042      	b.n	8004652 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fc83 	bl	8004edc <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e04c      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d118      	bne.n	8004652 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	f47f ae99 	bne.w	800438e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	00010004 	.word	0x00010004
 8004688:	20000008 	.word	0x20000008
 800468c:	14f8b589 	.word	0x14f8b589

08004690 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	460b      	mov	r3, r1
 800469e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d006      	beq.n	80046ba <I2C_MasterRequestWrite+0x2a>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d003      	beq.n	80046ba <I2C_MasterRequestWrite+0x2a>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046b8:	d108      	bne.n	80046cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e00b      	b.n	80046e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	2b12      	cmp	r3, #18
 80046d2:	d107      	bne.n	80046e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fa9b 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470a:	d103      	bne.n	8004714 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e035      	b.n	8004784 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004720:	d108      	bne.n	8004734 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004730:	611a      	str	r2, [r3, #16]
 8004732:	e01b      	b.n	800476c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004734:	897b      	ldrh	r3, [r7, #10]
 8004736:	11db      	asrs	r3, r3, #7
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0306 	and.w	r3, r3, #6
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f063 030f 	orn	r3, r3, #15
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	490e      	ldr	r1, [pc, #56]	; (800478c <I2C_MasterRequestWrite+0xfc>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fac1 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e010      	b.n	8004784 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <I2C_MasterRequestWrite+0x100>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fab1 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010008 	.word	0x00010008
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	460b      	mov	r3, r1
 80047a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d006      	beq.n	80047ce <I2C_MasterRequestRead+0x3a>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d003      	beq.n	80047ce <I2C_MasterRequestRead+0x3a>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047cc:	d108      	bne.n	80047e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e00b      	b.n	80047f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	2b11      	cmp	r3, #17
 80047e6:	d107      	bne.n	80047f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fa11 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	d103      	bne.n	8004828 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e079      	b.n	8004920 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004834:	d108      	bne.n	8004848 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	611a      	str	r2, [r3, #16]
 8004846:	e05f      	b.n	8004908 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004848:	897b      	ldrh	r3, [r7, #10]
 800484a:	11db      	asrs	r3, r3, #7
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f063 030f 	orn	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4930      	ldr	r1, [pc, #192]	; (8004928 <I2C_MasterRequestRead+0x194>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fa37 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e054      	b.n	8004920 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4929      	ldr	r1, [pc, #164]	; (800492c <I2C_MasterRequestRead+0x198>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa27 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e044      	b.n	8004920 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f9af 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00d      	beq.n	80048f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e2:	d103      	bne.n	80048ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e017      	b.n	8004920 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048f0:	897b      	ldrh	r3, [r7, #10]
 80048f2:	11db      	asrs	r3, r3, #7
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 0306 	and.w	r3, r3, #6
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f063 030e 	orn	r3, r3, #14
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4907      	ldr	r1, [pc, #28]	; (800492c <I2C_MasterRequestRead+0x198>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f9e3 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	00010008 	.word	0x00010008
 800492c:	00010002 	.word	0x00010002

08004930 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2200      	movs	r2, #0
 8004962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f960 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00d      	beq.n	800498e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004980:	d103      	bne.n	800498a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e05f      	b.n	8004a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800499c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	492d      	ldr	r1, [pc, #180]	; (8004a58 <I2C_RequestMemoryWrite+0x128>)
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f998 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e04c      	b.n	8004a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	6a39      	ldr	r1, [r7, #32]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fa02 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d107      	bne.n	80049f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e02b      	b.n	8004a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d105      	bne.n	8004a08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049fc:	893b      	ldrh	r3, [r7, #8]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	611a      	str	r2, [r3, #16]
 8004a06:	e021      	b.n	8004a4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a08:	893b      	ldrh	r3, [r7, #8]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f9dc 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d107      	bne.n	8004a3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e005      	b.n	8004a4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a42:	893b      	ldrh	r3, [r7, #8]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	00010002 	.word	0x00010002

08004a5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	813b      	strh	r3, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8c2 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abc:	d103      	bne.n	8004ac6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0aa      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	6a3a      	ldr	r2, [r7, #32]
 8004ade:	4952      	ldr	r1, [pc, #328]	; (8004c28 <I2C_RequestMemoryRead+0x1cc>)
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f8fa 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e097      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	6a39      	ldr	r1, [r7, #32]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f964 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d107      	bne.n	8004b2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e076      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b38:	893b      	ldrh	r3, [r7, #8]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	611a      	str	r2, [r3, #16]
 8004b42:	e021      	b.n	8004b88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	6a39      	ldr	r1, [r7, #32]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f93e 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d107      	bne.n	8004b7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e050      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b7e:	893b      	ldrh	r3, [r7, #8]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	6a39      	ldr	r1, [r7, #32]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f923 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d107      	bne.n	8004bb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e035      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f82b 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	d103      	bne.n	8004bf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e013      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bf8:	897b      	ldrh	r3, [r7, #10]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	4906      	ldr	r1, [pc, #24]	; (8004c28 <I2C_RequestMemoryRead+0x1cc>)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f863 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	00010002 	.word	0x00010002

08004c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3c:	e025      	b.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c44:	d021      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fd fff7 	bl	8002c38 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e023      	b.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10d      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	e00c      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d0b6      	beq.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce8:	e051      	b.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d123      	bne.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e046      	b.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d48:	d021      	beq.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fd ff75 	bl	8002c38 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d116      	bne.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e020      	b.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10c      	bne.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e00b      	b.n	8004dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	43da      	mvns	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d18d      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de4:	e02d      	b.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8ce 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e02d      	b.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfc:	d021      	beq.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fd ff1b 	bl	8002c38 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d116      	bne.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e007      	b.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d1ca      	bne.n	8004de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e66:	e02d      	b.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f88d 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e02d      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e7e:	d021      	beq.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e80:	f7fd feda 	bl	8002c38 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e007      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d1ca      	bne.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee8:	e042      	b.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d119      	bne.n	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0210 	mvn.w	r2, #16
 8004f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e029      	b.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fd fe84 	bl	8002c38 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e007      	b.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d1b5      	bne.n	8004eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d11b      	bne.n	8004fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e26c      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8087 	beq.w	8005112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005004:	4b92      	ldr	r3, [pc, #584]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b04      	cmp	r3, #4
 800500e:	d00c      	beq.n	800502a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005010:	4b8f      	ldr	r3, [pc, #572]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d112      	bne.n	8005042 <HAL_RCC_OscConfig+0x5e>
 800501c:	4b8c      	ldr	r3, [pc, #560]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d10b      	bne.n	8005042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502a:	4b89      	ldr	r3, [pc, #548]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d06c      	beq.n	8005110 <HAL_RCC_OscConfig+0x12c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d168      	bne.n	8005110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e246      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504a:	d106      	bne.n	800505a <HAL_RCC_OscConfig+0x76>
 800504c:	4b80      	ldr	r3, [pc, #512]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7f      	ldr	r2, [pc, #508]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	e02e      	b.n	80050b8 <HAL_RCC_OscConfig+0xd4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <HAL_RCC_OscConfig+0x98>
 8005062:	4b7b      	ldr	r3, [pc, #492]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7a      	ldr	r2, [pc, #488]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	4b78      	ldr	r3, [pc, #480]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a77      	ldr	r2, [pc, #476]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e01d      	b.n	80050b8 <HAL_RCC_OscConfig+0xd4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0xbc>
 8005086:	4b72      	ldr	r3, [pc, #456]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a71      	ldr	r2, [pc, #452]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800508c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6e      	ldr	r2, [pc, #440]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e00b      	b.n	80050b8 <HAL_RCC_OscConfig+0xd4>
 80050a0:	4b6b      	ldr	r3, [pc, #428]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a6a      	ldr	r2, [pc, #424]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b68      	ldr	r3, [pc, #416]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a67      	ldr	r2, [pc, #412]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80050b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fd fdba 	bl	8002c38 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fd fdb6 	bl	8002c38 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	; 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1fa      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0xe4>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fd fda6 	bl	8002c38 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fd fda2 	bl	8002c38 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e1e6      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005102:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x10c>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d063      	beq.n	80051e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800511e:	4b4c      	ldr	r3, [pc, #304]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00b      	beq.n	8005142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800512a:	4b49      	ldr	r3, [pc, #292]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b08      	cmp	r3, #8
 8005134:	d11c      	bne.n	8005170 <HAL_RCC_OscConfig+0x18c>
 8005136:	4b46      	ldr	r3, [pc, #280]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d116      	bne.n	8005170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005142:	4b43      	ldr	r3, [pc, #268]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_RCC_OscConfig+0x176>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d001      	beq.n	800515a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e1ba      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515a:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4939      	ldr	r1, [pc, #228]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516e:	e03a      	b.n	80051e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d020      	beq.n	80051ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005178:	4b36      	ldr	r3, [pc, #216]	; (8005254 <HAL_RCC_OscConfig+0x270>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517e:	f7fd fd5b 	bl	8002c38 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005186:	f7fd fd57 	bl	8002c38 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e19b      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005198:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4927      	ldr	r1, [pc, #156]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]
 80051b8:	e015      	b.n	80051e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_RCC_OscConfig+0x270>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fd fd3a 	bl	8002c38 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fd fd36 	bl	8002c38 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e17a      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03a      	beq.n	8005268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d019      	beq.n	800522e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fa:	4b17      	ldr	r3, [pc, #92]	; (8005258 <HAL_RCC_OscConfig+0x274>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005200:	f7fd fd1a 	bl	8002c38 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005208:	f7fd fd16 	bl	8002c38 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e15a      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <HAL_RCC_OscConfig+0x26c>)
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005226:	2001      	movs	r0, #1
 8005228:	f000 fada 	bl	80057e0 <RCC_Delay>
 800522c:	e01c      	b.n	8005268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_RCC_OscConfig+0x274>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005234:	f7fd fd00 	bl	8002c38 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523a:	e00f      	b.n	800525c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523c:	f7fd fcfc 	bl	8002c38 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d908      	bls.n	800525c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e140      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000
 8005254:	42420000 	.word	0x42420000
 8005258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	4b9e      	ldr	r3, [pc, #632]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e9      	bne.n	800523c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a6 	beq.w	80053c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b97      	ldr	r3, [pc, #604]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b94      	ldr	r3, [pc, #592]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4a93      	ldr	r2, [pc, #588]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005290:	61d3      	str	r3, [r2, #28]
 8005292:	4b91      	ldr	r3, [pc, #580]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a2:	4b8e      	ldr	r3, [pc, #568]	; (80054dc <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ae:	4b8b      	ldr	r3, [pc, #556]	; (80054dc <HAL_RCC_OscConfig+0x4f8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a8a      	ldr	r2, [pc, #552]	; (80054dc <HAL_RCC_OscConfig+0x4f8>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ba:	f7fd fcbd 	bl	8002c38 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c2:	f7fd fcb9 	bl	8002c38 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b64      	cmp	r3, #100	; 0x64
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0fd      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d4:	4b81      	ldr	r3, [pc, #516]	; (80054dc <HAL_RCC_OscConfig+0x4f8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x312>
 80052e8:	4b7b      	ldr	r3, [pc, #492]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4a7a      	ldr	r2, [pc, #488]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6213      	str	r3, [r2, #32]
 80052f4:	e02d      	b.n	8005352 <HAL_RCC_OscConfig+0x36e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x334>
 80052fe:	4b76      	ldr	r3, [pc, #472]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4a75      	ldr	r2, [pc, #468]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	6213      	str	r3, [r2, #32]
 800530a:	4b73      	ldr	r3, [pc, #460]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	4a72      	ldr	r2, [pc, #456]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005310:	f023 0304 	bic.w	r3, r3, #4
 8005314:	6213      	str	r3, [r2, #32]
 8005316:	e01c      	b.n	8005352 <HAL_RCC_OscConfig+0x36e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b05      	cmp	r3, #5
 800531e:	d10c      	bne.n	800533a <HAL_RCC_OscConfig+0x356>
 8005320:	4b6d      	ldr	r3, [pc, #436]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	4a6c      	ldr	r2, [pc, #432]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005326:	f043 0304 	orr.w	r3, r3, #4
 800532a:	6213      	str	r3, [r2, #32]
 800532c:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a69      	ldr	r2, [pc, #420]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6213      	str	r3, [r2, #32]
 8005338:	e00b      	b.n	8005352 <HAL_RCC_OscConfig+0x36e>
 800533a:	4b67      	ldr	r3, [pc, #412]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a66      	ldr	r2, [pc, #408]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	6213      	str	r3, [r2, #32]
 8005346:	4b64      	ldr	r3, [pc, #400]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4a63      	ldr	r2, [pc, #396]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800534c:	f023 0304 	bic.w	r3, r3, #4
 8005350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d015      	beq.n	8005386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7fd fc6d 	bl	8002c38 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fd fc69 	bl	8002c38 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e0ab      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005378:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ee      	beq.n	8005362 <HAL_RCC_OscConfig+0x37e>
 8005384:	e014      	b.n	80053b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005386:	f7fd fc57 	bl	8002c38 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538c:	e00a      	b.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7fd fc53 	bl	8002c38 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f241 3288 	movw	r2, #5000	; 0x1388
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e095      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a4:	4b4c      	ldr	r3, [pc, #304]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1ee      	bne.n	800538e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b6:	4b48      	ldr	r3, [pc, #288]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	4a47      	ldr	r2, [pc, #284]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80053bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8081 	beq.w	80054ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053cc:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d061      	beq.n	800549c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d146      	bne.n	800546e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e0:	4b3f      	ldr	r3, [pc, #252]	; (80054e0 <HAL_RCC_OscConfig+0x4fc>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e6:	f7fd fc27 	bl	8002c38 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ee:	f7fd fc23 	bl	8002c38 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e067      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005400:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f0      	bne.n	80053ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005414:	d108      	bne.n	8005428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	492d      	ldr	r1, [pc, #180]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005428:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a19      	ldr	r1, [r3, #32]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	430b      	orrs	r3, r1
 800543a:	4927      	ldr	r1, [pc, #156]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <HAL_RCC_OscConfig+0x4fc>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fd fbf7 	bl	8002c38 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544e:	f7fd fbf3 	bl	8002c38 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e037      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005460:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x46a>
 800546c:	e02f      	b.n	80054ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <HAL_RCC_OscConfig+0x4fc>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd fbe0 	bl	8002c38 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fbdc 	bl	8002c38 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e020      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x498>
 800549a:	e018      	b.n	80054ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e013      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_OscConfig+0x4f4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d106      	bne.n	80054ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d001      	beq.n	80054ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40007000 	.word	0x40007000
 80054e0:	42420060 	.word	0x42420060

080054e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0d0      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054f8:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d910      	bls.n	8005528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b67      	ldr	r3, [pc, #412]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 0207 	bic.w	r2, r3, #7
 800550e:	4965      	ldr	r1, [pc, #404]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0b8      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a58      	ldr	r2, [pc, #352]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800554a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800555e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	494d      	ldr	r1, [pc, #308]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d040      	beq.n	8005604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d115      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a2:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e073      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b2:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e06b      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055c2:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f023 0203 	bic.w	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4936      	ldr	r1, [pc, #216]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055d4:	f7fd fb30 	bl	8002c38 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055da:	e00a      	b.n	80055f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055dc:	f7fd fb2c 	bl	8002c38 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e053      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 020c 	and.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	429a      	cmp	r2, r3
 8005602:	d1eb      	bne.n	80055dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d210      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 0207 	bic.w	r2, r3, #7
 800561a:	4922      	ldr	r1, [pc, #136]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	4313      	orrs	r3, r2
 8005620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4916      	ldr	r1, [pc, #88]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	4313      	orrs	r3, r2
 8005650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005672:	f000 f821 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8005676:	4601      	mov	r1, r0
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005684:	5cd3      	ldrb	r3, [r2, r3]
 8005686:	fa21 f303 	lsr.w	r3, r1, r3
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_ClockConfig+0x1cc>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd fa8e 	bl	8002bb4 <HAL_InitTick>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40022000 	.word	0x40022000
 80056a8:	40021000 	.word	0x40021000
 80056ac:	08008000 	.word	0x08008000
 80056b0:	20000008 	.word	0x20000008
 80056b4:	2000000c 	.word	0x2000000c

080056b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	b490      	push	{r4, r7}
 80056ba:	b08a      	sub	sp, #40	; 0x28
 80056bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056c0:	1d3c      	adds	r4, r7, #4
 80056c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <HAL_RCC_GetSysClockFreq+0xb4>)
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	2300      	movs	r3, #0
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056e2:	4b23      	ldr	r3, [pc, #140]	; (8005770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d002      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x40>
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d003      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0x46>
 80056f6:	e02d      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056fa:	623b      	str	r3, [r7, #32]
      break;
 80056fc:	e02d      	b.n	800575a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	0c9b      	lsrs	r3, r3, #18
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800570a:	4413      	add	r3, r2
 800570c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005710:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800571c:	4b14      	ldr	r3, [pc, #80]	; (8005770 <HAL_RCC_GetSysClockFreq+0xb8>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c5b      	lsrs	r3, r3, #17
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800572a:	4413      	add	r3, r2
 800572c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005730:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005736:	fb02 f203 	mul.w	r2, r2, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	e004      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	623b      	str	r3, [r7, #32]
      break;
 8005752:	e002      	b.n	800575a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005754:	4b07      	ldr	r3, [pc, #28]	; (8005774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005756:	623b      	str	r3, [r7, #32]
      break;
 8005758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575a:	6a3b      	ldr	r3, [r7, #32]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3728      	adds	r7, #40	; 0x28
 8005760:	46bd      	mov	sp, r7
 8005762:	bc90      	pop	{r4, r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	08007fec 	.word	0x08007fec
 800576c:	08007ffc 	.word	0x08007ffc
 8005770:	40021000 	.word	0x40021000
 8005774:	007a1200 	.word	0x007a1200
 8005778:	003d0900 	.word	0x003d0900

0800577c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <HAL_RCC_GetHCLKFreq+0x10>)
 8005782:	681b      	ldr	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	20000008 	.word	0x20000008

08005790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005794:	f7ff fff2 	bl	800577c <HAL_RCC_GetHCLKFreq>
 8005798:	4601      	mov	r1, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	0a1b      	lsrs	r3, r3, #8
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4a03      	ldr	r2, [pc, #12]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
 80057a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40021000 	.word	0x40021000
 80057b4:	08008010 	.word	0x08008010

080057b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057bc:	f7ff ffde 	bl	800577c <HAL_RCC_GetHCLKFreq>
 80057c0:	4601      	mov	r1, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	0adb      	lsrs	r3, r3, #11
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
 80057d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40021000 	.word	0x40021000
 80057dc:	08008010 	.word	0x08008010

080057e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <RCC_Delay+0x34>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <RCC_Delay+0x38>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0a5b      	lsrs	r3, r3, #9
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057fc:	bf00      	nop
  }
  while (Delay --);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	60fa      	str	r2, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f9      	bne.n	80057fc <RCC_Delay+0x1c>
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000008 	.word	0x20000008
 8005818:	10624dd3 	.word	0x10624dd3

0800581c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e076      	b.n	800591c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583e:	d009      	beq.n	8005854 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
 8005846:	e005      	b.n	8005854 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fc fbae 	bl	8001fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	ea42 0103 	orr.w	r1, r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	0c1a      	lsrs	r2, r3, #16
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f002 0204 	and.w	r2, r2, #4
 80058fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005940:	d112      	bne.n	8005968 <HAL_SPI_Receive+0x44>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2204      	movs	r2, #4
 800594e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005952:	88fa      	ldrh	r2, [r7, #6]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f8f1 	bl	8005b46 <HAL_SPI_TransmitReceive>
 8005964:	4603      	mov	r3, r0
 8005966:	e0ea      	b.n	8005b3e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_SPI_Receive+0x52>
 8005972:	2302      	movs	r3, #2
 8005974:	e0e3      	b.n	8005b3e <HAL_SPI_Receive+0x21a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800597e:	f7fd f95b 	bl	8002c38 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d002      	beq.n	8005996 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005990:	2302      	movs	r3, #2
 8005992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005994:	e0ca      	b.n	8005b2c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_SPI_Receive+0x7e>
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a6:	e0c1      	b.n	8005b2c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2204      	movs	r2, #4
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ee:	d10f      	bne.n	8005a10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d007      	beq.n	8005a2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d162      	bne.n	8005afc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a36:	e02e      	b.n	8005a96 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d115      	bne.n	8005a72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f103 020c 	add.w	r2, r3, #12
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	7812      	ldrb	r2, [r2, #0]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a70:	e011      	b.n	8005a96 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a72:	f7fd f8e1 	bl	8002c38 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d803      	bhi.n	8005a8a <HAL_SPI_Receive+0x166>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a88:	d102      	bne.n	8005a90 <HAL_SPI_Receive+0x16c>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a94:	e04a      	b.n	8005b2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1cb      	bne.n	8005a38 <HAL_SPI_Receive+0x114>
 8005aa0:	e031      	b.n	8005b06 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d113      	bne.n	8005ad8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	b292      	uxth	r2, r2
 8005abc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	1c9a      	adds	r2, r3, #2
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad6:	e011      	b.n	8005afc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad8:	f7fd f8ae 	bl	8002c38 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d803      	bhi.n	8005af0 <HAL_SPI_Receive+0x1cc>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_Receive+0x1d2>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005afa:	e017      	b.n	8005b2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1cd      	bne.n	8005aa2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fa46 	bl	8005f9c <SPI_EndRxTransaction>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
 8005b28:	e000      	b.n	8005b2c <HAL_SPI_Receive+0x208>
  }

error :
 8005b2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b08c      	sub	sp, #48	; 0x30
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
 8005b52:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b54:	2301      	movs	r3, #1
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x26>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e18a      	b.n	8005e82 <HAL_SPI_TransmitReceive+0x33c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b74:	f7fd f860 	bl	8002c38 <HAL_GetTick>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b8a:	887b      	ldrh	r3, [r7, #2]
 8005b8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d00f      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x70>
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9c:	d107      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x68>
 8005ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d003      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bb4:	e15b      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x82>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x82>
 8005bc2:	887b      	ldrh	r3, [r7, #2]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d103      	bne.n	8005bd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bce:	e14e      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d003      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2205      	movs	r2, #5
 8005be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	887a      	ldrh	r2, [r7, #2]
 8005bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	887a      	ldrh	r2, [r7, #2]
 8005bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	887a      	ldrh	r2, [r7, #2]
 8005c06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	887a      	ldrh	r2, [r7, #2]
 8005c0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d007      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c40:	d178      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x10a>
 8005c4a:	8b7b      	ldrh	r3, [r7, #26]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d166      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	e053      	b.n	8005d1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d11b      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x176>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x176>
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d113      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	881a      	ldrh	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	1c9a      	adds	r2, r3, #2
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d119      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x1b8>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d014      	beq.n	8005cfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	b292      	uxth	r2, r2
 8005ce0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cfe:	f7fc ff9b 	bl	8002c38 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d807      	bhi.n	8005d1e <HAL_SPI_TransmitReceive+0x1d8>
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d14:	d003      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d1c:	e0a7      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1a6      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x130>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1a1      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x130>
 8005d32:	e07c      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_TransmitReceive+0x1fc>
 8005d3c:	8b7b      	ldrh	r3, [r7, #26]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d16b      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d68:	e057      	b.n	8005e1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d11c      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x26c>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d017      	beq.n	8005db2 <HAL_SPI_TransmitReceive+0x26c>
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d114      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d119      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x2ae>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d014      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005df0:	2301      	movs	r3, #1
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005df4:	f7fc ff20 	bl	8002c38 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d803      	bhi.n	8005e0c <HAL_SPI_TransmitReceive+0x2c6>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0a:	d102      	bne.n	8005e12 <HAL_SPI_TransmitReceive+0x2cc>
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e18:	e029      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1a2      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x224>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d19d      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f904 	bl	8006040 <SPI_EndRxTxTransaction>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e4a:	e010      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	e000      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005e6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3730      	adds	r7, #48	; 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e9c:	f7fc fecc 	bl	8002c38 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005eac:	f7fc fec4 	bl	8002c38 <HAL_GetTick>
 8005eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005eb2:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	015b      	lsls	r3, r3, #5
 8005eb8:	0d1b      	lsrs	r3, r3, #20
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ec2:	e054      	b.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eca:	d050      	beq.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ecc:	f7fc feb4 	bl	8002c38 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d902      	bls.n	8005ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d13d      	bne.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efa:	d111      	bne.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f04:	d004      	beq.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0e:	d107      	bne.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f28:	d10f      	bne.n	8005f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e017      	b.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d19b      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000008 	.word	0x20000008

08005f9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb0:	d111      	bne.n	8005fd6 <SPI_EndRxTransaction+0x3a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fba:	d004      	beq.n	8005fc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc4:	d107      	bne.n	8005fd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fde:	d117      	bne.n	8006010 <SPI_EndRxTransaction+0x74>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d112      	bne.n	8006010 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff ff49 	bl	8005e8c <SPI_WaitFlagStateUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01a      	beq.n	8006036 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	f043 0220 	orr.w	r2, r3, #32
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e013      	b.n	8006038 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff ff36 	bl	8005e8c <SPI_WaitFlagStateUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e000      	b.n	8006038 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ff18 	bl	8005e8c <SPI_WaitFlagStateUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e000      	b.n	8006074 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e041      	b.n	8006112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fb ffe0 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f000 fa9e 	bl	80065fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e041      	b.n	80061b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f839 	bl	80061b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f000 fa4f 	bl	80065fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x24>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e022      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d109      	bne.n	800620a <HAL_TIM_PWM_Start+0x3e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e015      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d109      	bne.n	8006224 <HAL_TIM_PWM_Start+0x58>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e008      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e05e      	b.n	80062fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0x82>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624c:	e013      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0x92>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625c:	e00b      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626c:	e003      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fc3c 	bl	8006afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <HAL_TIM_PWM_Start+0x138>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d107      	bne.n	800629e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a18      	ldr	r2, [pc, #96]	; (8006304 <HAL_TIM_PWM_Start+0x138>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_TIM_PWM_Start+0xfa>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d009      	beq.n	80062c6 <HAL_TIM_PWM_Start+0xfa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <HAL_TIM_PWM_Start+0x13c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_TIM_PWM_Start+0xfa>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a12      	ldr	r2, [pc, #72]	; (800630c <HAL_TIM_PWM_Start+0x140>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d111      	bne.n	80062ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	d010      	beq.n	80062fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	e007      	b.n	80062fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800

08006310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006326:	2302      	movs	r3, #2
 8006328:	e0ac      	b.n	8006484 <HAL_TIM_PWM_ConfigChannel+0x174>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b0c      	cmp	r3, #12
 8006336:	f200 809f 	bhi.w	8006478 <HAL_TIM_PWM_ConfigChannel+0x168>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006375 	.word	0x08006375
 8006344:	08006479 	.word	0x08006479
 8006348:	08006479 	.word	0x08006479
 800634c:	08006479 	.word	0x08006479
 8006350:	080063b5 	.word	0x080063b5
 8006354:	08006479 	.word	0x08006479
 8006358:	08006479 	.word	0x08006479
 800635c:	08006479 	.word	0x08006479
 8006360:	080063f7 	.word	0x080063f7
 8006364:	08006479 	.word	0x08006479
 8006368:	08006479 	.word	0x08006479
 800636c:	08006479 	.word	0x08006479
 8006370:	08006437 	.word	0x08006437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 f9a0 	bl	80066c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0208 	orr.w	r2, r2, #8
 800638e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0204 	bic.w	r2, r2, #4
 800639e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6999      	ldr	r1, [r3, #24]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	619a      	str	r2, [r3, #24]
      break;
 80063b2:	e062      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f9e6 	bl	800678c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6999      	ldr	r1, [r3, #24]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	021a      	lsls	r2, r3, #8
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	619a      	str	r2, [r3, #24]
      break;
 80063f4:	e041      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fa2f 	bl	8006860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0208 	orr.w	r2, r2, #8
 8006410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0204 	bic.w	r2, r2, #4
 8006420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69d9      	ldr	r1, [r3, #28]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	61da      	str	r2, [r3, #28]
      break;
 8006434:	e021      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fa79 	bl	8006934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69da      	ldr	r2, [r3, #28]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69d9      	ldr	r1, [r3, #28]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	021a      	lsls	r2, r3, #8
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	61da      	str	r2, [r3, #28]
      break;
 8006476:	e000      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIM_ConfigClockSource+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e0a6      	b.n	80065f2 <HAL_TIM_ConfigClockSource+0x166>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d067      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0x120>
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d80b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x6c>
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d073      	beq.n	80065cc <HAL_TIM_ConfigClockSource+0x140>
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d802      	bhi.n	80064ee <HAL_TIM_ConfigClockSource+0x62>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d06f      	beq.n	80065cc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064ec:	e078      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d06c      	beq.n	80065cc <HAL_TIM_ConfigClockSource+0x140>
 80064f2:	2b30      	cmp	r3, #48	; 0x30
 80064f4:	d06a      	beq.n	80065cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80064f6:	e073      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064f8:	2b70      	cmp	r3, #112	; 0x70
 80064fa:	d00d      	beq.n	8006518 <HAL_TIM_ConfigClockSource+0x8c>
 80064fc:	2b70      	cmp	r3, #112	; 0x70
 80064fe:	d804      	bhi.n	800650a <HAL_TIM_ConfigClockSource+0x7e>
 8006500:	2b50      	cmp	r3, #80	; 0x50
 8006502:	d033      	beq.n	800656c <HAL_TIM_ConfigClockSource+0xe0>
 8006504:	2b60      	cmp	r3, #96	; 0x60
 8006506:	d041      	beq.n	800658c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006508:	e06a      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800650a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650e:	d066      	beq.n	80065de <HAL_TIM_ConfigClockSource+0x152>
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	d017      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006516:	e063      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6899      	ldr	r1, [r3, #8]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f000 fac9 	bl	8006abe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800653a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	609a      	str	r2, [r3, #8]
      break;
 8006544:	e04c      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6899      	ldr	r1, [r3, #8]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f000 fab2 	bl	8006abe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006568:	609a      	str	r2, [r3, #8]
      break;
 800656a:	e039      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	461a      	mov	r2, r3
 800657a:	f000 fa29 	bl	80069d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2150      	movs	r1, #80	; 0x50
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fa80 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 800658a:	e029      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	461a      	mov	r2, r3
 800659a:	f000 fa47 	bl	8006a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2160      	movs	r1, #96	; 0x60
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fa70 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80065aa:	e019      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	461a      	mov	r2, r3
 80065ba:	f000 fa09 	bl	80069d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2140      	movs	r1, #64	; 0x40
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fa60 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80065ca:	e009      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f000 fa57 	bl	8006a8a <TIM_ITRx_SetConfig>
        break;
 80065dc:	e000      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a29      	ldr	r2, [pc, #164]	; (80066b4 <TIM_Base_SetConfig+0xb8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0x30>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0x30>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <TIM_Base_SetConfig+0xbc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0x30>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a25      	ldr	r2, [pc, #148]	; (80066bc <TIM_Base_SetConfig+0xc0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <TIM_Base_SetConfig+0xb8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00b      	beq.n	800665e <TIM_Base_SetConfig+0x62>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664c:	d007      	beq.n	800665e <TIM_Base_SetConfig+0x62>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a19      	ldr	r2, [pc, #100]	; (80066b8 <TIM_Base_SetConfig+0xbc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_Base_SetConfig+0x62>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a18      	ldr	r2, [pc, #96]	; (80066bc <TIM_Base_SetConfig+0xc0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a07      	ldr	r2, [pc, #28]	; (80066b4 <TIM_Base_SetConfig+0xb8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d103      	bne.n	80066a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	615a      	str	r2, [r3, #20]
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800

080066c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 0302 	bic.w	r3, r3, #2
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <TIM_OC1_SetConfig+0xc8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d10c      	bne.n	8006736 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0308 	bic.w	r3, r3, #8
 8006722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 0304 	bic.w	r3, r3, #4
 8006734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a13      	ldr	r2, [pc, #76]	; (8006788 <TIM_OC1_SetConfig+0xc8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d111      	bne.n	8006762 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800674c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40012c00 	.word	0x40012c00

0800678c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0210 	bic.w	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0320 	bic.w	r3, r3, #32
 80067d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1d      	ldr	r2, [pc, #116]	; (800685c <TIM_OC2_SetConfig+0xd0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d10d      	bne.n	8006808 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a14      	ldr	r2, [pc, #80]	; (800685c <TIM_OC2_SetConfig+0xd0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d113      	bne.n	8006838 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr
 800685c:	40012c00 	.word	0x40012c00

08006860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	021b      	lsls	r3, r3, #8
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <TIM_OC3_SetConfig+0xd0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d10d      	bne.n	80068da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a14      	ldr	r2, [pc, #80]	; (8006930 <TIM_OC3_SetConfig+0xd0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d113      	bne.n	800690a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00

08006934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800697e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0f      	ldr	r2, [pc, #60]	; (80069cc <TIM_OC4_SetConfig+0x98>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d109      	bne.n	80069a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr
 80069cc:	40012c00 	.word	0x40012c00

080069d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 030a 	bic.w	r3, r3, #10
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f023 0210 	bic.w	r2, r3, #16
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	031b      	lsls	r3, r3, #12
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f043 0307 	orr.w	r3, r3, #7
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b087      	sub	sp, #28
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
 8006aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	021a      	lsls	r2, r3, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	609a      	str	r2, [r3, #8]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2201      	movs	r2, #1
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1a      	ldr	r2, [r3, #32]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	401a      	ands	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e046      	b.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40000800 	.word	0x40000800

08006c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e03d      	b.n	8006c98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e03f      	b.n	8006d34 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7fb fa4f 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2224      	movs	r2, #36	; 0x24
 8006cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fb7c 	bl	80073e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d166      	bne.n	8006e24 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_UART_Receive_DMA+0x26>
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e05f      	b.n	8006e26 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Receive_DMA+0x38>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e058      	b.n	8006e26 <HAL_UART_Receive_DMA+0xea>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	88fa      	ldrh	r2, [r7, #6]
 8006d86:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2222      	movs	r2, #34	; 0x22
 8006d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	4a25      	ldr	r2, [pc, #148]	; (8006e30 <HAL_UART_Receive_DMA+0xf4>)
 8006d9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da2:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <HAL_UART_Receive_DMA+0xf8>)
 8006da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <HAL_UART_Receive_DMA+0xfc>)
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db2:	2200      	movs	r2, #0
 8006db4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	f7fc f8c7 	bl	8002f60 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dfe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e1e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e000      	b.n	8006e26 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
  }
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	08007073 	.word	0x08007073
 8006e34:	080070db 	.word	0x080070db
 8006e38:	080070f7 	.word	0x080070f7

08006e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10d      	bne.n	8006e8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x52>
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa2c 	bl	80072e4 <UART_Receive_IT>
      return;
 8006e8c:	e0d1      	b.n	8007032 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80b0 	beq.w	8006ff6 <HAL_UART_IRQHandler+0x1ba>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <HAL_UART_IRQHandler+0x70>
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80a5 	beq.w	8006ff6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_UART_IRQHandler+0x90>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec4:	f043 0201 	orr.w	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_UART_IRQHandler+0xb0>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	f043 0202 	orr.w	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <HAL_UART_IRQHandler+0xd0>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	f043 0204 	orr.w	r2, r3, #4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00f      	beq.n	8006f36 <HAL_UART_IRQHandler+0xfa>
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <HAL_UART_IRQHandler+0xee>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	f043 0208 	orr.w	r2, r3, #8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d078      	beq.n	8007030 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d007      	beq.n	8006f58 <HAL_UART_IRQHandler+0x11c>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9c6 	bl	80072e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <HAL_UART_IRQHandler+0x144>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d031      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f917 	bl	80071b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d023      	beq.n	8006fdc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d013      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_UART_IRQHandler+0x1fc>)
 8006fb2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fc f831 	bl	8003020 <HAL_DMA_Abort_IT>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd2:	e00e      	b.n	8006ff2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f843 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fda:	e00a      	b.n	8006ff2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f83f 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe2:	e006      	b.n	8006ff2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f83b 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006ff0:	e01e      	b.n	8007030 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	bf00      	nop
    return;
 8006ff4:	e01c      	b.n	8007030 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_UART_IRQHandler+0x1d6>
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f903 	bl	8007216 <UART_Transmit_IT>
    return;
 8007010:	e00f      	b.n	8007032 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_UART_IRQHandler+0x1f6>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f944 	bl	80072b4 <UART_EndTransmit_IT>
    return;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007030:	bf00      	nop
  }
}
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	080071ef 	.word	0x080071ef

0800703c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr

08007072 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d11e      	bne.n	80070cc <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7fa fa6f 	bl	80015b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff ffb0 	bl	800704e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	bf14      	ite	ne
 8007116:	2301      	movne	r3, #1
 8007118:	2300      	moveq	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b21      	cmp	r3, #33	; 0x21
 8007128:	d108      	bne.n	800713c <UART_DMAError+0x46>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007136:	68b8      	ldr	r0, [r7, #8]
 8007138:	f000 f827 	bl	800718a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf14      	ite	ne
 800714a:	2301      	movne	r3, #1
 800714c:	2300      	moveq	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b22      	cmp	r3, #34	; 0x22
 800715c:	d108      	bne.n	8007170 <UART_DMAError+0x7a>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800716a:	68b8      	ldr	r0, [r7, #8]
 800716c:	f000 f822 	bl	80071b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007174:	f043 0210 	orr.w	r2, r3, #16
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800717c:	68b8      	ldr	r0, [r7, #8]
 800717e:	f7ff ff6f 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80071a0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bc80      	pop	{r7}
 80071b2:	4770      	bx	lr

080071b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff ff29 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b21      	cmp	r3, #33	; 0x21
 8007228:	d13e      	bne.n	80072a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007232:	d114      	bne.n	800725e <UART_Transmit_IT+0x48>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d110      	bne.n	800725e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007250:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	1c9a      	adds	r2, r3, #2
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	621a      	str	r2, [r3, #32]
 800725c:	e008      	b.n	8007270 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	1c59      	adds	r1, r3, #1
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6211      	str	r1, [r2, #32]
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29b      	uxth	r3, r3
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4619      	mov	r1, r3
 800727e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10f      	bne.n	80072a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007292:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e000      	b.n	80072aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072a8:	2302      	movs	r3, #2
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff feb1 	bl	800703c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b22      	cmp	r3, #34	; 0x22
 80072f6:	d170      	bne.n	80073da <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d117      	bne.n	8007332 <UART_Receive_IT+0x4e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d113      	bne.n	8007332 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007320:	b29a      	uxth	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	629a      	str	r2, [r3, #40]	; 0x28
 8007330:	e026      	b.n	8007380 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007344:	d007      	beq.n	8007356 <UART_Receive_IT+0x72>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <UART_Receive_IT+0x80>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	b2da      	uxtb	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e008      	b.n	8007376 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007370:	b2da      	uxtb	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29b      	uxth	r3, r3
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4619      	mov	r1, r3
 800738e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007390:	2b00      	cmp	r3, #0
 8007392:	d120      	bne.n	80073d6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0220 	bic.w	r2, r2, #32
 80073a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695a      	ldr	r2, [r3, #20]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fa f8ef 	bl	80015b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e002      	b.n	80073dc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e000      	b.n	80073dc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80073da:	2302      	movs	r3, #2
  }
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800741e:	f023 030c 	bic.w	r3, r3, #12
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	430b      	orrs	r3, r1
 800742a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2c      	ldr	r2, [pc, #176]	; (80074f8 <UART_SetConfig+0x114>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d103      	bne.n	8007454 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800744c:	f7fe f9b4 	bl	80057b8 <HAL_RCC_GetPCLK2Freq>
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	e002      	b.n	800745a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007454:	f7fe f99c 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8007458:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009a      	lsls	r2, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007470:	4a22      	ldr	r2, [pc, #136]	; (80074fc <UART_SetConfig+0x118>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	095b      	lsrs	r3, r3, #5
 8007478:	0119      	lsls	r1, r3, #4
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009a      	lsls	r2, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007490:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <UART_SetConfig+0x118>)
 8007492:	fba3 0302 	umull	r0, r3, r3, r2
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2064      	movs	r0, #100	; 0x64
 800749a:	fb00 f303 	mul.w	r3, r0, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	3332      	adds	r3, #50	; 0x32
 80074a4:	4a15      	ldr	r2, [pc, #84]	; (80074fc <UART_SetConfig+0x118>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074b0:	4419      	add	r1, r3
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <UART_SetConfig+0x118>)
 80074ca:	fba3 0302 	umull	r0, r3, r3, r2
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	2064      	movs	r0, #100	; 0x64
 80074d2:	fb00 f303 	mul.w	r3, r0, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	3332      	adds	r3, #50	; 0x32
 80074dc:	4a07      	ldr	r2, [pc, #28]	; (80074fc <UART_SetConfig+0x118>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	f003 020f 	and.w	r2, r3, #15
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	440a      	add	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40013800 	.word	0x40013800
 80074fc:	51eb851f 	.word	0x51eb851f

08007500 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007504:	4904      	ldr	r1, [pc, #16]	; (8007518 <MX_FATFS_Init+0x18>)
 8007506:	4805      	ldr	r0, [pc, #20]	; (800751c <MX_FATFS_Init+0x1c>)
 8007508:	f000 f8a6 	bl	8007658 <FATFS_LinkDriver>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	4b03      	ldr	r3, [pc, #12]	; (8007520 <MX_FATFS_Init+0x20>)
 8007512:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007514:	bf00      	nop
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200009f4 	.word	0x200009f4
 800751c:	20000014 	.word	0x20000014
 8007520:	200009f8 	.word	0x200009f8

08007524 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <USER_initialize+0x20>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007534:	4b03      	ldr	r3, [pc, #12]	; (8007544 <USER_initialize+0x20>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr
 8007544:	20000011 	.word	0x20000011

08007548 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <USER_status+0x20>)
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <USER_status+0x20>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr
 8007568:	20000011 	.word	0x20000011

0800756c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800757c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007598:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	603a      	str	r2, [r7, #0]
 80075ae:	71fb      	strb	r3, [r7, #7]
 80075b0:	460b      	mov	r3, r1
 80075b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
    return res;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80075da:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 80075dc:	7a5b      	ldrb	r3, [r3, #9]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d831      	bhi.n	8007648 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075e4:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 80075e6:	7a5b      	ldrb	r3, [r3, #9]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 80075ee:	2100      	movs	r1, #0
 80075f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80075f2:	4b18      	ldr	r3, [pc, #96]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 80075f4:	7a5b      	ldrb	r3, [r3, #9]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	4a16      	ldr	r2, [pc, #88]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 8007604:	7a5b      	ldrb	r3, [r3, #9]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	4b12      	ldr	r3, [pc, #72]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 800760c:	4413      	add	r3, r2
 800760e:	79fa      	ldrb	r2, [r7, #7]
 8007610:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 8007614:	7a5b      	ldrb	r3, [r3, #9]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	b2d1      	uxtb	r1, r2
 800761c:	4a0d      	ldr	r2, [pc, #52]	; (8007654 <FATFS_LinkDriverEx+0x90>)
 800761e:	7251      	strb	r1, [r2, #9]
 8007620:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007622:	7dbb      	ldrb	r3, [r7, #22]
 8007624:	3330      	adds	r3, #48	; 0x30
 8007626:	b2da      	uxtb	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	3301      	adds	r3, #1
 8007630:	223a      	movs	r2, #58	; 0x3a
 8007632:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	3302      	adds	r3, #2
 8007638:	222f      	movs	r2, #47	; 0x2f
 800763a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3303      	adds	r3, #3
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
}
 800764a:	4618      	mov	r0, r3
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	20000510 	.word	0x20000510

08007658 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007662:	2200      	movs	r2, #0
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff ffac 	bl	80075c4 <FATFS_LinkDriverEx>
 800766c:	4603      	mov	r3, r0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <__errno>:
 8007678:	4b01      	ldr	r3, [pc, #4]	; (8007680 <__errno+0x8>)
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	20000028 	.word	0x20000028

08007684 <__libc_init_array>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	2500      	movs	r5, #0
 8007688:	4e0c      	ldr	r6, [pc, #48]	; (80076bc <__libc_init_array+0x38>)
 800768a:	4c0d      	ldr	r4, [pc, #52]	; (80076c0 <__libc_init_array+0x3c>)
 800768c:	1ba4      	subs	r4, r4, r6
 800768e:	10a4      	asrs	r4, r4, #2
 8007690:	42a5      	cmp	r5, r4
 8007692:	d109      	bne.n	80076a8 <__libc_init_array+0x24>
 8007694:	f000 fc6e 	bl	8007f74 <_init>
 8007698:	2500      	movs	r5, #0
 800769a:	4e0a      	ldr	r6, [pc, #40]	; (80076c4 <__libc_init_array+0x40>)
 800769c:	4c0a      	ldr	r4, [pc, #40]	; (80076c8 <__libc_init_array+0x44>)
 800769e:	1ba4      	subs	r4, r4, r6
 80076a0:	10a4      	asrs	r4, r4, #2
 80076a2:	42a5      	cmp	r5, r4
 80076a4:	d105      	bne.n	80076b2 <__libc_init_array+0x2e>
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ac:	4798      	blx	r3
 80076ae:	3501      	adds	r5, #1
 80076b0:	e7ee      	b.n	8007690 <__libc_init_array+0xc>
 80076b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076b6:	4798      	blx	r3
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7f2      	b.n	80076a2 <__libc_init_array+0x1e>
 80076bc:	0800804c 	.word	0x0800804c
 80076c0:	0800804c 	.word	0x0800804c
 80076c4:	0800804c 	.word	0x0800804c
 80076c8:	08008050 	.word	0x08008050

080076cc <memset>:
 80076cc:	4603      	mov	r3, r0
 80076ce:	4402      	add	r2, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <_free_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4605      	mov	r5, r0
 80076e0:	2900      	cmp	r1, #0
 80076e2:	d043      	beq.n	800776c <_free_r+0x90>
 80076e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e8:	1f0c      	subs	r4, r1, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfb8      	it	lt
 80076ee:	18e4      	addlt	r4, r4, r3
 80076f0:	f000 f8dd 	bl	80078ae <__malloc_lock>
 80076f4:	4a1e      	ldr	r2, [pc, #120]	; (8007770 <_free_r+0x94>)
 80076f6:	6813      	ldr	r3, [r2, #0]
 80076f8:	4610      	mov	r0, r2
 80076fa:	b933      	cbnz	r3, 800770a <_free_r+0x2e>
 80076fc:	6063      	str	r3, [r4, #4]
 80076fe:	6014      	str	r4, [r2, #0]
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007706:	f000 b8d3 	b.w	80078b0 <__malloc_unlock>
 800770a:	42a3      	cmp	r3, r4
 800770c:	d90b      	bls.n	8007726 <_free_r+0x4a>
 800770e:	6821      	ldr	r1, [r4, #0]
 8007710:	1862      	adds	r2, r4, r1
 8007712:	4293      	cmp	r3, r2
 8007714:	bf01      	itttt	eq
 8007716:	681a      	ldreq	r2, [r3, #0]
 8007718:	685b      	ldreq	r3, [r3, #4]
 800771a:	1852      	addeq	r2, r2, r1
 800771c:	6022      	streq	r2, [r4, #0]
 800771e:	6063      	str	r3, [r4, #4]
 8007720:	6004      	str	r4, [r0, #0]
 8007722:	e7ed      	b.n	8007700 <_free_r+0x24>
 8007724:	4613      	mov	r3, r2
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	b10a      	cbz	r2, 800772e <_free_r+0x52>
 800772a:	42a2      	cmp	r2, r4
 800772c:	d9fa      	bls.n	8007724 <_free_r+0x48>
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	1858      	adds	r0, r3, r1
 8007732:	42a0      	cmp	r0, r4
 8007734:	d10b      	bne.n	800774e <_free_r+0x72>
 8007736:	6820      	ldr	r0, [r4, #0]
 8007738:	4401      	add	r1, r0
 800773a:	1858      	adds	r0, r3, r1
 800773c:	4282      	cmp	r2, r0
 800773e:	6019      	str	r1, [r3, #0]
 8007740:	d1de      	bne.n	8007700 <_free_r+0x24>
 8007742:	6810      	ldr	r0, [r2, #0]
 8007744:	6852      	ldr	r2, [r2, #4]
 8007746:	4401      	add	r1, r0
 8007748:	6019      	str	r1, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	e7d8      	b.n	8007700 <_free_r+0x24>
 800774e:	d902      	bls.n	8007756 <_free_r+0x7a>
 8007750:	230c      	movs	r3, #12
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	e7d4      	b.n	8007700 <_free_r+0x24>
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	1821      	adds	r1, r4, r0
 800775a:	428a      	cmp	r2, r1
 800775c:	bf01      	itttt	eq
 800775e:	6811      	ldreq	r1, [r2, #0]
 8007760:	6852      	ldreq	r2, [r2, #4]
 8007762:	1809      	addeq	r1, r1, r0
 8007764:	6021      	streq	r1, [r4, #0]
 8007766:	6062      	str	r2, [r4, #4]
 8007768:	605c      	str	r4, [r3, #4]
 800776a:	e7c9      	b.n	8007700 <_free_r+0x24>
 800776c:	bd38      	pop	{r3, r4, r5, pc}
 800776e:	bf00      	nop
 8007770:	2000051c 	.word	0x2000051c

08007774 <_malloc_r>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	1ccd      	adds	r5, r1, #3
 8007778:	f025 0503 	bic.w	r5, r5, #3
 800777c:	3508      	adds	r5, #8
 800777e:	2d0c      	cmp	r5, #12
 8007780:	bf38      	it	cc
 8007782:	250c      	movcc	r5, #12
 8007784:	2d00      	cmp	r5, #0
 8007786:	4606      	mov	r6, r0
 8007788:	db01      	blt.n	800778e <_malloc_r+0x1a>
 800778a:	42a9      	cmp	r1, r5
 800778c:	d903      	bls.n	8007796 <_malloc_r+0x22>
 800778e:	230c      	movs	r3, #12
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	2000      	movs	r0, #0
 8007794:	bd70      	pop	{r4, r5, r6, pc}
 8007796:	f000 f88a 	bl	80078ae <__malloc_lock>
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <_malloc_r+0xac>)
 800779c:	6814      	ldr	r4, [r2, #0]
 800779e:	4621      	mov	r1, r4
 80077a0:	b991      	cbnz	r1, 80077c8 <_malloc_r+0x54>
 80077a2:	4c20      	ldr	r4, [pc, #128]	; (8007824 <_malloc_r+0xb0>)
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	b91b      	cbnz	r3, 80077b0 <_malloc_r+0x3c>
 80077a8:	4630      	mov	r0, r6
 80077aa:	f000 f83d 	bl	8007828 <_sbrk_r>
 80077ae:	6020      	str	r0, [r4, #0]
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f000 f838 	bl	8007828 <_sbrk_r>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d124      	bne.n	8007806 <_malloc_r+0x92>
 80077bc:	230c      	movs	r3, #12
 80077be:	4630      	mov	r0, r6
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	f000 f875 	bl	80078b0 <__malloc_unlock>
 80077c6:	e7e4      	b.n	8007792 <_malloc_r+0x1e>
 80077c8:	680b      	ldr	r3, [r1, #0]
 80077ca:	1b5b      	subs	r3, r3, r5
 80077cc:	d418      	bmi.n	8007800 <_malloc_r+0x8c>
 80077ce:	2b0b      	cmp	r3, #11
 80077d0:	d90f      	bls.n	80077f2 <_malloc_r+0x7e>
 80077d2:	600b      	str	r3, [r1, #0]
 80077d4:	18cc      	adds	r4, r1, r3
 80077d6:	50cd      	str	r5, [r1, r3]
 80077d8:	4630      	mov	r0, r6
 80077da:	f000 f869 	bl	80078b0 <__malloc_unlock>
 80077de:	f104 000b 	add.w	r0, r4, #11
 80077e2:	1d23      	adds	r3, r4, #4
 80077e4:	f020 0007 	bic.w	r0, r0, #7
 80077e8:	1ac3      	subs	r3, r0, r3
 80077ea:	d0d3      	beq.n	8007794 <_malloc_r+0x20>
 80077ec:	425a      	negs	r2, r3
 80077ee:	50e2      	str	r2, [r4, r3]
 80077f0:	e7d0      	b.n	8007794 <_malloc_r+0x20>
 80077f2:	684b      	ldr	r3, [r1, #4]
 80077f4:	428c      	cmp	r4, r1
 80077f6:	bf16      	itet	ne
 80077f8:	6063      	strne	r3, [r4, #4]
 80077fa:	6013      	streq	r3, [r2, #0]
 80077fc:	460c      	movne	r4, r1
 80077fe:	e7eb      	b.n	80077d8 <_malloc_r+0x64>
 8007800:	460c      	mov	r4, r1
 8007802:	6849      	ldr	r1, [r1, #4]
 8007804:	e7cc      	b.n	80077a0 <_malloc_r+0x2c>
 8007806:	1cc4      	adds	r4, r0, #3
 8007808:	f024 0403 	bic.w	r4, r4, #3
 800780c:	42a0      	cmp	r0, r4
 800780e:	d005      	beq.n	800781c <_malloc_r+0xa8>
 8007810:	1a21      	subs	r1, r4, r0
 8007812:	4630      	mov	r0, r6
 8007814:	f000 f808 	bl	8007828 <_sbrk_r>
 8007818:	3001      	adds	r0, #1
 800781a:	d0cf      	beq.n	80077bc <_malloc_r+0x48>
 800781c:	6025      	str	r5, [r4, #0]
 800781e:	e7db      	b.n	80077d8 <_malloc_r+0x64>
 8007820:	2000051c 	.word	0x2000051c
 8007824:	20000520 	.word	0x20000520

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	2300      	movs	r3, #0
 800782c:	4c05      	ldr	r4, [pc, #20]	; (8007844 <_sbrk_r+0x1c>)
 800782e:	4605      	mov	r5, r0
 8007830:	4608      	mov	r0, r1
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	f7fa fe5a 	bl	80024ec <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20000e58 	.word	0x20000e58

08007848 <siprintf>:
 8007848:	b40e      	push	{r1, r2, r3}
 800784a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800784e:	b500      	push	{lr}
 8007850:	b09c      	sub	sp, #112	; 0x70
 8007852:	ab1d      	add	r3, sp, #116	; 0x74
 8007854:	9002      	str	r0, [sp, #8]
 8007856:	9006      	str	r0, [sp, #24]
 8007858:	9107      	str	r1, [sp, #28]
 800785a:	9104      	str	r1, [sp, #16]
 800785c:	4808      	ldr	r0, [pc, #32]	; (8007880 <siprintf+0x38>)
 800785e:	4909      	ldr	r1, [pc, #36]	; (8007884 <siprintf+0x3c>)
 8007860:	f853 2b04 	ldr.w	r2, [r3], #4
 8007864:	9105      	str	r1, [sp, #20]
 8007866:	6800      	ldr	r0, [r0, #0]
 8007868:	a902      	add	r1, sp, #8
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	f000 f8a2 	bl	80079b4 <_svfiprintf_r>
 8007870:	2200      	movs	r2, #0
 8007872:	9b02      	ldr	r3, [sp, #8]
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	b01c      	add	sp, #112	; 0x70
 8007878:	f85d eb04 	ldr.w	lr, [sp], #4
 800787c:	b003      	add	sp, #12
 800787e:	4770      	bx	lr
 8007880:	20000028 	.word	0x20000028
 8007884:	ffff0208 	.word	0xffff0208

08007888 <strcpy>:
 8007888:	4603      	mov	r3, r0
 800788a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800788e:	f803 2b01 	strb.w	r2, [r3], #1
 8007892:	2a00      	cmp	r2, #0
 8007894:	d1f9      	bne.n	800788a <strcpy+0x2>
 8007896:	4770      	bx	lr

08007898 <memcpy>:
 8007898:	b510      	push	{r4, lr}
 800789a:	1e43      	subs	r3, r0, #1
 800789c:	440a      	add	r2, r1
 800789e:	4291      	cmp	r1, r2
 80078a0:	d100      	bne.n	80078a4 <memcpy+0xc>
 80078a2:	bd10      	pop	{r4, pc}
 80078a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ac:	e7f7      	b.n	800789e <memcpy+0x6>

080078ae <__malloc_lock>:
 80078ae:	4770      	bx	lr

080078b0 <__malloc_unlock>:
 80078b0:	4770      	bx	lr

080078b2 <_realloc_r>:
 80078b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b4:	4607      	mov	r7, r0
 80078b6:	4614      	mov	r4, r2
 80078b8:	460e      	mov	r6, r1
 80078ba:	b921      	cbnz	r1, 80078c6 <_realloc_r+0x14>
 80078bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078c0:	4611      	mov	r1, r2
 80078c2:	f7ff bf57 	b.w	8007774 <_malloc_r>
 80078c6:	b922      	cbnz	r2, 80078d2 <_realloc_r+0x20>
 80078c8:	f7ff ff08 	bl	80076dc <_free_r>
 80078cc:	4625      	mov	r5, r4
 80078ce:	4628      	mov	r0, r5
 80078d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d2:	f000 fb16 	bl	8007f02 <_malloc_usable_size_r>
 80078d6:	42a0      	cmp	r0, r4
 80078d8:	d20f      	bcs.n	80078fa <_realloc_r+0x48>
 80078da:	4621      	mov	r1, r4
 80078dc:	4638      	mov	r0, r7
 80078de:	f7ff ff49 	bl	8007774 <_malloc_r>
 80078e2:	4605      	mov	r5, r0
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d0f2      	beq.n	80078ce <_realloc_r+0x1c>
 80078e8:	4631      	mov	r1, r6
 80078ea:	4622      	mov	r2, r4
 80078ec:	f7ff ffd4 	bl	8007898 <memcpy>
 80078f0:	4631      	mov	r1, r6
 80078f2:	4638      	mov	r0, r7
 80078f4:	f7ff fef2 	bl	80076dc <_free_r>
 80078f8:	e7e9      	b.n	80078ce <_realloc_r+0x1c>
 80078fa:	4635      	mov	r5, r6
 80078fc:	e7e7      	b.n	80078ce <_realloc_r+0x1c>

080078fe <__ssputs_r>:
 80078fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007902:	688e      	ldr	r6, [r1, #8]
 8007904:	4682      	mov	sl, r0
 8007906:	429e      	cmp	r6, r3
 8007908:	460c      	mov	r4, r1
 800790a:	4690      	mov	r8, r2
 800790c:	4699      	mov	r9, r3
 800790e:	d837      	bhi.n	8007980 <__ssputs_r+0x82>
 8007910:	898a      	ldrh	r2, [r1, #12]
 8007912:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007916:	d031      	beq.n	800797c <__ssputs_r+0x7e>
 8007918:	2302      	movs	r3, #2
 800791a:	6825      	ldr	r5, [r4, #0]
 800791c:	6909      	ldr	r1, [r1, #16]
 800791e:	1a6f      	subs	r7, r5, r1
 8007920:	6965      	ldr	r5, [r4, #20]
 8007922:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007926:	fb95 f5f3 	sdiv	r5, r5, r3
 800792a:	f109 0301 	add.w	r3, r9, #1
 800792e:	443b      	add	r3, r7
 8007930:	429d      	cmp	r5, r3
 8007932:	bf38      	it	cc
 8007934:	461d      	movcc	r5, r3
 8007936:	0553      	lsls	r3, r2, #21
 8007938:	d530      	bpl.n	800799c <__ssputs_r+0x9e>
 800793a:	4629      	mov	r1, r5
 800793c:	f7ff ff1a 	bl	8007774 <_malloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	b950      	cbnz	r0, 800795a <__ssputs_r+0x5c>
 8007944:	230c      	movs	r3, #12
 8007946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800794a:	f8ca 3000 	str.w	r3, [sl]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	463a      	mov	r2, r7
 800795c:	6921      	ldr	r1, [r4, #16]
 800795e:	f7ff ff9b 	bl	8007898 <memcpy>
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	6126      	str	r6, [r4, #16]
 8007970:	443e      	add	r6, r7
 8007972:	6026      	str	r6, [r4, #0]
 8007974:	464e      	mov	r6, r9
 8007976:	6165      	str	r5, [r4, #20]
 8007978:	1bed      	subs	r5, r5, r7
 800797a:	60a5      	str	r5, [r4, #8]
 800797c:	454e      	cmp	r6, r9
 800797e:	d900      	bls.n	8007982 <__ssputs_r+0x84>
 8007980:	464e      	mov	r6, r9
 8007982:	4632      	mov	r2, r6
 8007984:	4641      	mov	r1, r8
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	f000 faa2 	bl	8007ed0 <memmove>
 800798c:	68a3      	ldr	r3, [r4, #8]
 800798e:	2000      	movs	r0, #0
 8007990:	1b9b      	subs	r3, r3, r6
 8007992:	60a3      	str	r3, [r4, #8]
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	441e      	add	r6, r3
 8007998:	6026      	str	r6, [r4, #0]
 800799a:	e7dc      	b.n	8007956 <__ssputs_r+0x58>
 800799c:	462a      	mov	r2, r5
 800799e:	f7ff ff88 	bl	80078b2 <_realloc_r>
 80079a2:	4606      	mov	r6, r0
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d1e2      	bne.n	800796e <__ssputs_r+0x70>
 80079a8:	6921      	ldr	r1, [r4, #16]
 80079aa:	4650      	mov	r0, sl
 80079ac:	f7ff fe96 	bl	80076dc <_free_r>
 80079b0:	e7c8      	b.n	8007944 <__ssputs_r+0x46>
	...

080079b4 <_svfiprintf_r>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	461d      	mov	r5, r3
 80079ba:	898b      	ldrh	r3, [r1, #12]
 80079bc:	b09d      	sub	sp, #116	; 0x74
 80079be:	061f      	lsls	r7, r3, #24
 80079c0:	4680      	mov	r8, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	4616      	mov	r6, r2
 80079c6:	d50f      	bpl.n	80079e8 <_svfiprintf_r+0x34>
 80079c8:	690b      	ldr	r3, [r1, #16]
 80079ca:	b96b      	cbnz	r3, 80079e8 <_svfiprintf_r+0x34>
 80079cc:	2140      	movs	r1, #64	; 0x40
 80079ce:	f7ff fed1 	bl	8007774 <_malloc_r>
 80079d2:	6020      	str	r0, [r4, #0]
 80079d4:	6120      	str	r0, [r4, #16]
 80079d6:	b928      	cbnz	r0, 80079e4 <_svfiprintf_r+0x30>
 80079d8:	230c      	movs	r3, #12
 80079da:	f8c8 3000 	str.w	r3, [r8]
 80079de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e2:	e0c8      	b.n	8007b76 <_svfiprintf_r+0x1c2>
 80079e4:	2340      	movs	r3, #64	; 0x40
 80079e6:	6163      	str	r3, [r4, #20]
 80079e8:	2300      	movs	r3, #0
 80079ea:	9309      	str	r3, [sp, #36]	; 0x24
 80079ec:	2320      	movs	r3, #32
 80079ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f2:	2330      	movs	r3, #48	; 0x30
 80079f4:	f04f 0b01 	mov.w	fp, #1
 80079f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079fc:	9503      	str	r5, [sp, #12]
 80079fe:	4637      	mov	r7, r6
 8007a00:	463d      	mov	r5, r7
 8007a02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a06:	b10b      	cbz	r3, 8007a0c <_svfiprintf_r+0x58>
 8007a08:	2b25      	cmp	r3, #37	; 0x25
 8007a0a:	d13e      	bne.n	8007a8a <_svfiprintf_r+0xd6>
 8007a0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a10:	d00b      	beq.n	8007a2a <_svfiprintf_r+0x76>
 8007a12:	4653      	mov	r3, sl
 8007a14:	4632      	mov	r2, r6
 8007a16:	4621      	mov	r1, r4
 8007a18:	4640      	mov	r0, r8
 8007a1a:	f7ff ff70 	bl	80078fe <__ssputs_r>
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f000 80a4 	beq.w	8007b6c <_svfiprintf_r+0x1b8>
 8007a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a26:	4453      	add	r3, sl
 8007a28:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2a:	783b      	ldrb	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 809d 	beq.w	8007b6c <_svfiprintf_r+0x1b8>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a44:	931a      	str	r3, [sp, #104]	; 0x68
 8007a46:	462f      	mov	r7, r5
 8007a48:	2205      	movs	r2, #5
 8007a4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a4e:	4850      	ldr	r0, [pc, #320]	; (8007b90 <_svfiprintf_r+0x1dc>)
 8007a50:	f000 fa30 	bl	8007eb4 <memchr>
 8007a54:	9b04      	ldr	r3, [sp, #16]
 8007a56:	b9d0      	cbnz	r0, 8007a8e <_svfiprintf_r+0xda>
 8007a58:	06d9      	lsls	r1, r3, #27
 8007a5a:	bf44      	itt	mi
 8007a5c:	2220      	movmi	r2, #32
 8007a5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a62:	071a      	lsls	r2, r3, #28
 8007a64:	bf44      	itt	mi
 8007a66:	222b      	movmi	r2, #43	; 0x2b
 8007a68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a6c:	782a      	ldrb	r2, [r5, #0]
 8007a6e:	2a2a      	cmp	r2, #42	; 0x2a
 8007a70:	d015      	beq.n	8007a9e <_svfiprintf_r+0xea>
 8007a72:	462f      	mov	r7, r5
 8007a74:	2000      	movs	r0, #0
 8007a76:	250a      	movs	r5, #10
 8007a78:	9a07      	ldr	r2, [sp, #28]
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a80:	3b30      	subs	r3, #48	; 0x30
 8007a82:	2b09      	cmp	r3, #9
 8007a84:	d94d      	bls.n	8007b22 <_svfiprintf_r+0x16e>
 8007a86:	b1b8      	cbz	r0, 8007ab8 <_svfiprintf_r+0x104>
 8007a88:	e00f      	b.n	8007aaa <_svfiprintf_r+0xf6>
 8007a8a:	462f      	mov	r7, r5
 8007a8c:	e7b8      	b.n	8007a00 <_svfiprintf_r+0x4c>
 8007a8e:	4a40      	ldr	r2, [pc, #256]	; (8007b90 <_svfiprintf_r+0x1dc>)
 8007a90:	463d      	mov	r5, r7
 8007a92:	1a80      	subs	r0, r0, r2
 8007a94:	fa0b f000 	lsl.w	r0, fp, r0
 8007a98:	4318      	orrs	r0, r3
 8007a9a:	9004      	str	r0, [sp, #16]
 8007a9c:	e7d3      	b.n	8007a46 <_svfiprintf_r+0x92>
 8007a9e:	9a03      	ldr	r2, [sp, #12]
 8007aa0:	1d11      	adds	r1, r2, #4
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	9103      	str	r1, [sp, #12]
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	db01      	blt.n	8007aae <_svfiprintf_r+0xfa>
 8007aaa:	9207      	str	r2, [sp, #28]
 8007aac:	e004      	b.n	8007ab8 <_svfiprintf_r+0x104>
 8007aae:	4252      	negs	r2, r2
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	9207      	str	r2, [sp, #28]
 8007ab6:	9304      	str	r3, [sp, #16]
 8007ab8:	783b      	ldrb	r3, [r7, #0]
 8007aba:	2b2e      	cmp	r3, #46	; 0x2e
 8007abc:	d10c      	bne.n	8007ad8 <_svfiprintf_r+0x124>
 8007abe:	787b      	ldrb	r3, [r7, #1]
 8007ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac2:	d133      	bne.n	8007b2c <_svfiprintf_r+0x178>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	3702      	adds	r7, #2
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	9203      	str	r2, [sp, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ad6:	9305      	str	r3, [sp, #20]
 8007ad8:	4d2e      	ldr	r5, [pc, #184]	; (8007b94 <_svfiprintf_r+0x1e0>)
 8007ada:	2203      	movs	r2, #3
 8007adc:	7839      	ldrb	r1, [r7, #0]
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 f9e8 	bl	8007eb4 <memchr>
 8007ae4:	b138      	cbz	r0, 8007af6 <_svfiprintf_r+0x142>
 8007ae6:	2340      	movs	r3, #64	; 0x40
 8007ae8:	1b40      	subs	r0, r0, r5
 8007aea:	fa03 f000 	lsl.w	r0, r3, r0
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	3701      	adds	r7, #1
 8007af2:	4303      	orrs	r3, r0
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	7839      	ldrb	r1, [r7, #0]
 8007af8:	2206      	movs	r2, #6
 8007afa:	4827      	ldr	r0, [pc, #156]	; (8007b98 <_svfiprintf_r+0x1e4>)
 8007afc:	1c7e      	adds	r6, r7, #1
 8007afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b02:	f000 f9d7 	bl	8007eb4 <memchr>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d038      	beq.n	8007b7c <_svfiprintf_r+0x1c8>
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <_svfiprintf_r+0x1e8>)
 8007b0c:	bb13      	cbnz	r3, 8007b54 <_svfiprintf_r+0x1a0>
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	f023 0307 	bic.w	r3, r3, #7
 8007b16:	3308      	adds	r3, #8
 8007b18:	9303      	str	r3, [sp, #12]
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	444b      	add	r3, r9
 8007b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b20:	e76d      	b.n	80079fe <_svfiprintf_r+0x4a>
 8007b22:	fb05 3202 	mla	r2, r5, r2, r3
 8007b26:	2001      	movs	r0, #1
 8007b28:	460f      	mov	r7, r1
 8007b2a:	e7a6      	b.n	8007a7a <_svfiprintf_r+0xc6>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	250a      	movs	r5, #10
 8007b30:	4619      	mov	r1, r3
 8007b32:	3701      	adds	r7, #1
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	4638      	mov	r0, r7
 8007b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b3c:	3a30      	subs	r2, #48	; 0x30
 8007b3e:	2a09      	cmp	r2, #9
 8007b40:	d903      	bls.n	8007b4a <_svfiprintf_r+0x196>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0c8      	beq.n	8007ad8 <_svfiprintf_r+0x124>
 8007b46:	9105      	str	r1, [sp, #20]
 8007b48:	e7c6      	b.n	8007ad8 <_svfiprintf_r+0x124>
 8007b4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4607      	mov	r7, r0
 8007b52:	e7f0      	b.n	8007b36 <_svfiprintf_r+0x182>
 8007b54:	ab03      	add	r3, sp, #12
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <_svfiprintf_r+0x1ec>)
 8007b5c:	a904      	add	r1, sp, #16
 8007b5e:	4640      	mov	r0, r8
 8007b60:	f3af 8000 	nop.w
 8007b64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b68:	4681      	mov	r9, r0
 8007b6a:	d1d6      	bne.n	8007b1a <_svfiprintf_r+0x166>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	065b      	lsls	r3, r3, #25
 8007b70:	f53f af35 	bmi.w	80079de <_svfiprintf_r+0x2a>
 8007b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b76:	b01d      	add	sp, #116	; 0x74
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	ab03      	add	r3, sp, #12
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4622      	mov	r2, r4
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <_svfiprintf_r+0x1ec>)
 8007b84:	a904      	add	r1, sp, #16
 8007b86:	4640      	mov	r0, r8
 8007b88:	f000 f882 	bl	8007c90 <_printf_i>
 8007b8c:	e7ea      	b.n	8007b64 <_svfiprintf_r+0x1b0>
 8007b8e:	bf00      	nop
 8007b90:	08008018 	.word	0x08008018
 8007b94:	0800801e 	.word	0x0800801e
 8007b98:	08008022 	.word	0x08008022
 8007b9c:	00000000 	.word	0x00000000
 8007ba0:	080078ff 	.word	0x080078ff

08007ba4 <_printf_common>:
 8007ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	4691      	mov	r9, r2
 8007baa:	461f      	mov	r7, r3
 8007bac:	688a      	ldr	r2, [r1, #8]
 8007bae:	690b      	ldr	r3, [r1, #16]
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	bfb8      	it	lt
 8007bb6:	4613      	movlt	r3, r2
 8007bb8:	f8c9 3000 	str.w	r3, [r9]
 8007bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bc6:	b112      	cbz	r2, 8007bce <_printf_common+0x2a>
 8007bc8:	3301      	adds	r3, #1
 8007bca:	f8c9 3000 	str.w	r3, [r9]
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	0699      	lsls	r1, r3, #26
 8007bd2:	bf42      	ittt	mi
 8007bd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007bd8:	3302      	addmi	r3, #2
 8007bda:	f8c9 3000 	strmi.w	r3, [r9]
 8007bde:	6825      	ldr	r5, [r4, #0]
 8007be0:	f015 0506 	ands.w	r5, r5, #6
 8007be4:	d107      	bne.n	8007bf6 <_printf_common+0x52>
 8007be6:	f104 0a19 	add.w	sl, r4, #25
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	f8d9 2000 	ldr.w	r2, [r9]
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	42ab      	cmp	r3, r5
 8007bf4:	dc29      	bgt.n	8007c4a <_printf_common+0xa6>
 8007bf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	3300      	adds	r3, #0
 8007bfe:	bf18      	it	ne
 8007c00:	2301      	movne	r3, #1
 8007c02:	0692      	lsls	r2, r2, #26
 8007c04:	d42e      	bmi.n	8007c64 <_printf_common+0xc0>
 8007c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	47c0      	blx	r8
 8007c10:	3001      	adds	r0, #1
 8007c12:	d021      	beq.n	8007c58 <_printf_common+0xb4>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	68e5      	ldr	r5, [r4, #12]
 8007c18:	f003 0306 	and.w	r3, r3, #6
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	bf18      	it	ne
 8007c20:	2500      	movne	r5, #0
 8007c22:	f8d9 2000 	ldr.w	r2, [r9]
 8007c26:	f04f 0900 	mov.w	r9, #0
 8007c2a:	bf08      	it	eq
 8007c2c:	1aad      	subeq	r5, r5, r2
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	6922      	ldr	r2, [r4, #16]
 8007c32:	bf08      	it	eq
 8007c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	bfc4      	itt	gt
 8007c3c:	1a9b      	subgt	r3, r3, r2
 8007c3e:	18ed      	addgt	r5, r5, r3
 8007c40:	341a      	adds	r4, #26
 8007c42:	454d      	cmp	r5, r9
 8007c44:	d11a      	bne.n	8007c7c <_printf_common+0xd8>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e008      	b.n	8007c5c <_printf_common+0xb8>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4630      	mov	r0, r6
 8007c52:	47c0      	blx	r8
 8007c54:	3001      	adds	r0, #1
 8007c56:	d103      	bne.n	8007c60 <_printf_common+0xbc>
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c60:	3501      	adds	r5, #1
 8007c62:	e7c2      	b.n	8007bea <_printf_common+0x46>
 8007c64:	2030      	movs	r0, #48	; 0x30
 8007c66:	18e1      	adds	r1, r4, r3
 8007c68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c72:	4422      	add	r2, r4
 8007c74:	3302      	adds	r3, #2
 8007c76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c7a:	e7c4      	b.n	8007c06 <_printf_common+0x62>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4639      	mov	r1, r7
 8007c82:	4630      	mov	r0, r6
 8007c84:	47c0      	blx	r8
 8007c86:	3001      	adds	r0, #1
 8007c88:	d0e6      	beq.n	8007c58 <_printf_common+0xb4>
 8007c8a:	f109 0901 	add.w	r9, r9, #1
 8007c8e:	e7d8      	b.n	8007c42 <_printf_common+0x9e>

08007c90 <_printf_i>:
 8007c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c98:	460c      	mov	r4, r1
 8007c9a:	7e09      	ldrb	r1, [r1, #24]
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	296e      	cmp	r1, #110	; 0x6e
 8007ca0:	4617      	mov	r7, r2
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	4698      	mov	r8, r3
 8007ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ca8:	f000 80b3 	beq.w	8007e12 <_printf_i+0x182>
 8007cac:	d822      	bhi.n	8007cf4 <_printf_i+0x64>
 8007cae:	2963      	cmp	r1, #99	; 0x63
 8007cb0:	d036      	beq.n	8007d20 <_printf_i+0x90>
 8007cb2:	d80a      	bhi.n	8007cca <_printf_i+0x3a>
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	f000 80b9 	beq.w	8007e2c <_printf_i+0x19c>
 8007cba:	2958      	cmp	r1, #88	; 0x58
 8007cbc:	f000 8083 	beq.w	8007dc6 <_printf_i+0x136>
 8007cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007cc8:	e032      	b.n	8007d30 <_printf_i+0xa0>
 8007cca:	2964      	cmp	r1, #100	; 0x64
 8007ccc:	d001      	beq.n	8007cd2 <_printf_i+0x42>
 8007cce:	2969      	cmp	r1, #105	; 0x69
 8007cd0:	d1f6      	bne.n	8007cc0 <_printf_i+0x30>
 8007cd2:	6820      	ldr	r0, [r4, #0]
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	0605      	lsls	r5, r0, #24
 8007cd8:	f103 0104 	add.w	r1, r3, #4
 8007cdc:	d52a      	bpl.n	8007d34 <_printf_i+0xa4>
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6011      	str	r1, [r2, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	da03      	bge.n	8007cee <_printf_i+0x5e>
 8007ce6:	222d      	movs	r2, #45	; 0x2d
 8007ce8:	425b      	negs	r3, r3
 8007cea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007cee:	486f      	ldr	r0, [pc, #444]	; (8007eac <_printf_i+0x21c>)
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	e039      	b.n	8007d68 <_printf_i+0xd8>
 8007cf4:	2973      	cmp	r1, #115	; 0x73
 8007cf6:	f000 809d 	beq.w	8007e34 <_printf_i+0x1a4>
 8007cfa:	d808      	bhi.n	8007d0e <_printf_i+0x7e>
 8007cfc:	296f      	cmp	r1, #111	; 0x6f
 8007cfe:	d020      	beq.n	8007d42 <_printf_i+0xb2>
 8007d00:	2970      	cmp	r1, #112	; 0x70
 8007d02:	d1dd      	bne.n	8007cc0 <_printf_i+0x30>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	f043 0320 	orr.w	r3, r3, #32
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	e003      	b.n	8007d16 <_printf_i+0x86>
 8007d0e:	2975      	cmp	r1, #117	; 0x75
 8007d10:	d017      	beq.n	8007d42 <_printf_i+0xb2>
 8007d12:	2978      	cmp	r1, #120	; 0x78
 8007d14:	d1d4      	bne.n	8007cc0 <_printf_i+0x30>
 8007d16:	2378      	movs	r3, #120	; 0x78
 8007d18:	4865      	ldr	r0, [pc, #404]	; (8007eb0 <_printf_i+0x220>)
 8007d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d1e:	e055      	b.n	8007dcc <_printf_i+0x13c>
 8007d20:	6813      	ldr	r3, [r2, #0]
 8007d22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d26:	1d19      	adds	r1, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6011      	str	r1, [r2, #0]
 8007d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d30:	2301      	movs	r3, #1
 8007d32:	e08c      	b.n	8007e4e <_printf_i+0x1be>
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d3a:	6011      	str	r1, [r2, #0]
 8007d3c:	bf18      	it	ne
 8007d3e:	b21b      	sxthne	r3, r3
 8007d40:	e7cf      	b.n	8007ce2 <_printf_i+0x52>
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	6825      	ldr	r5, [r4, #0]
 8007d46:	1d18      	adds	r0, r3, #4
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	0628      	lsls	r0, r5, #24
 8007d4c:	d501      	bpl.n	8007d52 <_printf_i+0xc2>
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	e002      	b.n	8007d58 <_printf_i+0xc8>
 8007d52:	0668      	lsls	r0, r5, #25
 8007d54:	d5fb      	bpl.n	8007d4e <_printf_i+0xbe>
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	296f      	cmp	r1, #111	; 0x6f
 8007d5a:	bf14      	ite	ne
 8007d5c:	220a      	movne	r2, #10
 8007d5e:	2208      	moveq	r2, #8
 8007d60:	4852      	ldr	r0, [pc, #328]	; (8007eac <_printf_i+0x21c>)
 8007d62:	2100      	movs	r1, #0
 8007d64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d68:	6865      	ldr	r5, [r4, #4]
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	60a5      	str	r5, [r4, #8]
 8007d6e:	f2c0 8095 	blt.w	8007e9c <_printf_i+0x20c>
 8007d72:	6821      	ldr	r1, [r4, #0]
 8007d74:	f021 0104 	bic.w	r1, r1, #4
 8007d78:	6021      	str	r1, [r4, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d13d      	bne.n	8007dfa <_printf_i+0x16a>
 8007d7e:	2d00      	cmp	r5, #0
 8007d80:	f040 808e 	bne.w	8007ea0 <_printf_i+0x210>
 8007d84:	4665      	mov	r5, ip
 8007d86:	2a08      	cmp	r2, #8
 8007d88:	d10b      	bne.n	8007da2 <_printf_i+0x112>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	07db      	lsls	r3, r3, #31
 8007d8e:	d508      	bpl.n	8007da2 <_printf_i+0x112>
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	6862      	ldr	r2, [r4, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	bfde      	ittt	le
 8007d98:	2330      	movle	r3, #48	; 0x30
 8007d9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007da2:	ebac 0305 	sub.w	r3, ip, r5
 8007da6:	6123      	str	r3, [r4, #16]
 8007da8:	f8cd 8000 	str.w	r8, [sp]
 8007dac:	463b      	mov	r3, r7
 8007dae:	aa03      	add	r2, sp, #12
 8007db0:	4621      	mov	r1, r4
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff fef6 	bl	8007ba4 <_printf_common>
 8007db8:	3001      	adds	r0, #1
 8007dba:	d14d      	bne.n	8007e58 <_printf_i+0x1c8>
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc0:	b005      	add	sp, #20
 8007dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dc6:	4839      	ldr	r0, [pc, #228]	; (8007eac <_printf_i+0x21c>)
 8007dc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007dcc:	6813      	ldr	r3, [r2, #0]
 8007dce:	6821      	ldr	r1, [r4, #0]
 8007dd0:	1d1d      	adds	r5, r3, #4
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6015      	str	r5, [r2, #0]
 8007dd6:	060a      	lsls	r2, r1, #24
 8007dd8:	d50b      	bpl.n	8007df2 <_printf_i+0x162>
 8007dda:	07ca      	lsls	r2, r1, #31
 8007ddc:	bf44      	itt	mi
 8007dde:	f041 0120 	orrmi.w	r1, r1, #32
 8007de2:	6021      	strmi	r1, [r4, #0]
 8007de4:	b91b      	cbnz	r3, 8007dee <_printf_i+0x15e>
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	f022 0220 	bic.w	r2, r2, #32
 8007dec:	6022      	str	r2, [r4, #0]
 8007dee:	2210      	movs	r2, #16
 8007df0:	e7b7      	b.n	8007d62 <_printf_i+0xd2>
 8007df2:	064d      	lsls	r5, r1, #25
 8007df4:	bf48      	it	mi
 8007df6:	b29b      	uxthmi	r3, r3
 8007df8:	e7ef      	b.n	8007dda <_printf_i+0x14a>
 8007dfa:	4665      	mov	r5, ip
 8007dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e00:	fb02 3311 	mls	r3, r2, r1, r3
 8007e04:	5cc3      	ldrb	r3, [r0, r3]
 8007e06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	d1f5      	bne.n	8007dfc <_printf_i+0x16c>
 8007e10:	e7b9      	b.n	8007d86 <_printf_i+0xf6>
 8007e12:	6813      	ldr	r3, [r2, #0]
 8007e14:	6825      	ldr	r5, [r4, #0]
 8007e16:	1d18      	adds	r0, r3, #4
 8007e18:	6961      	ldr	r1, [r4, #20]
 8007e1a:	6010      	str	r0, [r2, #0]
 8007e1c:	0628      	lsls	r0, r5, #24
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	d501      	bpl.n	8007e26 <_printf_i+0x196>
 8007e22:	6019      	str	r1, [r3, #0]
 8007e24:	e002      	b.n	8007e2c <_printf_i+0x19c>
 8007e26:	066a      	lsls	r2, r5, #25
 8007e28:	d5fb      	bpl.n	8007e22 <_printf_i+0x192>
 8007e2a:	8019      	strh	r1, [r3, #0]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4665      	mov	r5, ip
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	e7b9      	b.n	8007da8 <_printf_i+0x118>
 8007e34:	6813      	ldr	r3, [r2, #0]
 8007e36:	1d19      	adds	r1, r3, #4
 8007e38:	6011      	str	r1, [r2, #0]
 8007e3a:	681d      	ldr	r5, [r3, #0]
 8007e3c:	6862      	ldr	r2, [r4, #4]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4628      	mov	r0, r5
 8007e42:	f000 f837 	bl	8007eb4 <memchr>
 8007e46:	b108      	cbz	r0, 8007e4c <_printf_i+0x1bc>
 8007e48:	1b40      	subs	r0, r0, r5
 8007e4a:	6060      	str	r0, [r4, #4]
 8007e4c:	6863      	ldr	r3, [r4, #4]
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	2300      	movs	r3, #0
 8007e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e56:	e7a7      	b.n	8007da8 <_printf_i+0x118>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	47c0      	blx	r8
 8007e62:	3001      	adds	r0, #1
 8007e64:	d0aa      	beq.n	8007dbc <_printf_i+0x12c>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	079b      	lsls	r3, r3, #30
 8007e6a:	d413      	bmi.n	8007e94 <_printf_i+0x204>
 8007e6c:	68e0      	ldr	r0, [r4, #12]
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	4298      	cmp	r0, r3
 8007e72:	bfb8      	it	lt
 8007e74:	4618      	movlt	r0, r3
 8007e76:	e7a3      	b.n	8007dc0 <_printf_i+0x130>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	464a      	mov	r2, r9
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4630      	mov	r0, r6
 8007e80:	47c0      	blx	r8
 8007e82:	3001      	adds	r0, #1
 8007e84:	d09a      	beq.n	8007dbc <_printf_i+0x12c>
 8007e86:	3501      	adds	r5, #1
 8007e88:	68e3      	ldr	r3, [r4, #12]
 8007e8a:	9a03      	ldr	r2, [sp, #12]
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	42ab      	cmp	r3, r5
 8007e90:	dcf2      	bgt.n	8007e78 <_printf_i+0x1e8>
 8007e92:	e7eb      	b.n	8007e6c <_printf_i+0x1dc>
 8007e94:	2500      	movs	r5, #0
 8007e96:	f104 0919 	add.w	r9, r4, #25
 8007e9a:	e7f5      	b.n	8007e88 <_printf_i+0x1f8>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1ac      	bne.n	8007dfa <_printf_i+0x16a>
 8007ea0:	7803      	ldrb	r3, [r0, #0]
 8007ea2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eaa:	e76c      	b.n	8007d86 <_printf_i+0xf6>
 8007eac:	08008029 	.word	0x08008029
 8007eb0:	0800803a 	.word	0x0800803a

08007eb4 <memchr>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	b2c9      	uxtb	r1, r1
 8007eb8:	4402      	add	r2, r0
 8007eba:	4290      	cmp	r0, r2
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	d101      	bne.n	8007ec4 <memchr+0x10>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e003      	b.n	8007ecc <memchr+0x18>
 8007ec4:	781c      	ldrb	r4, [r3, #0]
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	428c      	cmp	r4, r1
 8007eca:	d1f6      	bne.n	8007eba <memchr+0x6>
 8007ecc:	4618      	mov	r0, r3
 8007ece:	bd10      	pop	{r4, pc}

08007ed0 <memmove>:
 8007ed0:	4288      	cmp	r0, r1
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	eb01 0302 	add.w	r3, r1, r2
 8007ed8:	d807      	bhi.n	8007eea <memmove+0x1a>
 8007eda:	1e42      	subs	r2, r0, #1
 8007edc:	4299      	cmp	r1, r3
 8007ede:	d00a      	beq.n	8007ef6 <memmove+0x26>
 8007ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ee8:	e7f8      	b.n	8007edc <memmove+0xc>
 8007eea:	4283      	cmp	r3, r0
 8007eec:	d9f5      	bls.n	8007eda <memmove+0xa>
 8007eee:	1881      	adds	r1, r0, r2
 8007ef0:	1ad2      	subs	r2, r2, r3
 8007ef2:	42d3      	cmn	r3, r2
 8007ef4:	d100      	bne.n	8007ef8 <memmove+0x28>
 8007ef6:	bd10      	pop	{r4, pc}
 8007ef8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007efc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f00:	e7f7      	b.n	8007ef2 <memmove+0x22>

08007f02 <_malloc_usable_size_r>:
 8007f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f06:	1f18      	subs	r0, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbc      	itt	lt
 8007f0c:	580b      	ldrlt	r3, [r1, r0]
 8007f0e:	18c0      	addlt	r0, r0, r3
 8007f10:	4770      	bx	lr
	...

08007f14 <trunc>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007f1a:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8007f1e:	2a13      	cmp	r2, #19
 8007f20:	4603      	mov	r3, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	dc10      	bgt.n	8007f48 <trunc+0x34>
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	bfb3      	iteet	lt
 8007f2a:	2000      	movlt	r0, #0
 8007f2c:	2000      	movge	r0, #0
 8007f2e:	4b10      	ldrge	r3, [pc, #64]	; (8007f70 <trunc+0x5c>)
 8007f30:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8007f34:	bfa4      	itt	ge
 8007f36:	fa43 f202 	asrge.w	r2, r3, r2
 8007f3a:	ea24 0102 	bicge.w	r1, r4, r2
 8007f3e:	4603      	mov	r3, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	4618      	mov	r0, r3
 8007f44:	4621      	mov	r1, r4
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f48:	2a33      	cmp	r2, #51	; 0x33
 8007f4a:	dd07      	ble.n	8007f5c <trunc+0x48>
 8007f4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007f50:	d1f7      	bne.n	8007f42 <trunc+0x2e>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	f7f8 f901 	bl	800015c <__adddf3>
 8007f5a:	e7f0      	b.n	8007f3e <trunc+0x2a>
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f60:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8007f64:	fa22 f505 	lsr.w	r5, r2, r5
 8007f68:	ea20 0005 	bic.w	r0, r0, r5
 8007f6c:	e7e7      	b.n	8007f3e <trunc+0x2a>
 8007f6e:	bf00      	nop
 8007f70:	000fffff 	.word	0x000fffff

08007f74 <_init>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr

08007f80 <_fini>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr
